-----------------------------------------------------------------------------------------
package Chapter5;

// 람다식 사용

// 1. 인터페이스 생성
interface Number {
	// 2. 인터페이스에 람다식으로 구현할 메서드 선언
	int getMax(int num1, int num2);
}



public class EX01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 두 수 중 큰 수를 반환하는 람다식 구현
		Number max = (x, y) -> (x >= y) ? x : y; 
		
		System.out.println(max.getMax(100, 200));
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

// 1. 인터페이스 선언
interface PrintString {
	void showString(String str);
}

public class EX02 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 2. 람다식 구현
		PrintString lambdaStr = str -> System.out.println(str);
		
		lambdaStr.showString("String");
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

interface Lamdatest1 {
	int sum(int num1, int num2);
}

public class EX03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Lamdatest1 op = (num1, num2) -> num1 + num2;
		System.out.println(op.sum(100, 200));
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

interface Lamdatest2 {
	int sum(int num1, int num2);
	int sub(int num1, int num2);
}

public class EX04 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Lamdatest2 op = (num1, num2) -> num1 + num2;
		System.out.println(op.sum(100, 200));
		// 람다식은 하나의 메서드를 구현하여 인터페이스형 변수에 대입하므로
		// 인터페이스가 하나 이상의 메서드를 가질 수 없음!
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

@FunctionalInterface
interface Lamdatest3 {
	int sum(int num1, int num2);
}

public class EX05 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Lamdatest3 op = (num1, num2) -> num1 + num2;
		System.out.println(op.sum(100, 200));
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

@FunctionalInterface
interface Lamdatest4 {
	int sum(int num1, int num2);
	int sub(int num1, int num2);
}

public class EX06 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		Lamdatest4 op = (num1, num2) -> num1 + num2;
//		System.out.println(op.sum(100, 200));
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

// 문자열 두 개를 연결해서 출력
// 1. 인터페이스 구현
interface StringConnection1 {
	public void makeString(String s1, String s2);
}

// 2. 클래스 구현
class StringConnectionImpl implements StringConnection1 {
	@Override
	public void makeString(String s1, String s2) {
		System.out.println(s1 + "," + s2);
	}
}

// 3. 메소드 호출

public class EX07 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1 = "Hello";
		String s2 = "Java";
		
		StringConnection1 Connection1 = new StringConnectionImpl();
		Connection1.makeString(s1, s2);
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

// 1. 인터페이스 구현
interface StringConnection2 {
	public void makeString(String s1, String s2);
}

public class EX08 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1 = "Hello";
		String s2 = "Java";
		// 2. 람다식 구현
		StringConnection2 connection2 = (s,v) -> System.out.println(s + "," + v);
		connection2.makeString(s1, s2);
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

class Person {
	String name;
	public Person(String name) {
		this.name = name;
	}
	public void speak() {
		System.out.println("내용없음");
	}
}

interface Dancer {
	void dance();
}

public class EX09 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Person person = new Person("춘식이") {
			@Override
			public void speak() {
				System.out.println(name + "입니다.");
			}
		};
		
		person.speak();
		
		Dancer dancer = new Dancer() {
			@Override
			public void dance() {
				System.out.println("춤을 춥니다~");
			}
		};
		
		dancer.dance();
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

// 1. 인터페이스 구현
interface StringConnection3 {
	public void makeString(String s1, String s2);
}

public class EX10 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1 = "Hello";
		String s2 = "Java";
		// 2. 람다식 구현
		StringConnection3 connection2 = (s,v) -> System.out.println(s + "," + v);
		connection2.makeString(s1, s2);
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

// 1. 인터페이스 구현
interface StringConnection4 {
	public void makeString(String s1, String s2);
}

public class EX11 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1 = "Hello";
		String s2 = "Java";
		
		// 2. 클래스 사용
		StringConnection4 connection4 = new StringConnection4() {
			@Override
			public void makeString(String s1, String s2) {
				System.out.println(s1 + "," + s2);
			}
		};
		
		connection4.makeString(s1, s2);
		
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

interface StringConnection5 {
	public void makeString(String s1, String s2);
}

public class EX12 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1 = "Hello";
		String s2 = "Java";
		int i = 100;
		StringConnection5 connection5 = (s,v) -> {
			i = 200;
			System.out.println(i);
			System.out.println(s + ","+ v);
		}; 
		connection5.makeString(s1, s2);
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

import java.util.function.Supplier;
// Supplier<T>: 매개변수가 없고 값을 반환

public class EX13 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Supplier<String> supplier = () -> "Hello, Supplier!";
		
		System.out.println(supplier.get());
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

import java.util.function.Consumer;
// Consumer<T>: 매개변수를 받아서 소비

public class EX14 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Consumer<String> consumer = s -> System.out.println("Consumed: " + s);
		
		consumer.accept("Data");
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

import java.util.function.Function;
// Function<T,R>: 하나의 매개변수를 받아서 결과를 반환 

public class EX15 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Function<Integer, String> intToString = i -> String.valueOf(i);
		
		int number = 333;
		String result = intToString.apply(number);
		System.out.println(result);
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

import java.util.function.Predicate;
// Predicate<T>: 매개변수를 받아서 논리적인 조건을 검사

public class EX16 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Predicate<Integer> isEven = num -> num % 2 == 0;
		
		int number = 4;
		boolean result = isEven.test(number);
		System.out.println(result); // true
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

import java.util.function.UnaryOperator;
// UnaryOperator<T>: 하나의 매개변수를 받아서 동일한 타입의 결과를 반환

public class EX17 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		UnaryOperator<String> addExclamation = s -> s + "Java";
		
		String input = "Hello";
		String result = addExclamation.apply(input);
		System.out.println(result);
	}

}

-----------------------------------------------------------------------------------------
package Chapter5;

// Fuction의 합성1
// andThen메서드: andThen 메서드는 현재 함수를 실행 한 후 다른 함수를 실행

import java.util.function.Function;

public class EX18 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 1. 함수 정의
		Function<Integer, Integer> addOne = x -> x + 1;
		Function<Integer, Integer>  multiplyByTwo = x -> x * 2;
		
		// 2. 함수 합성
		Function<Integer, Integer> addOneAndThenMultiplyByTwo1 = addOne.andThen(multiplyByTwo);
		
		// 3. 결과 출력
		int result = addOneAndThenMultiplyByTwo1.apply(3);
		System.out.println(result);
		
		
	}

}

-----------------------------------------------------------------------------------------

