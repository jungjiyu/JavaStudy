 람다식 
   : 누구인가
     : 함수형 인터페이스의 익명구현객체
       : 함수형인터페이스) 내부에 추상메서드 딱 하나만 가지는 인터페이스. 람다식을 담아 쓰는 변수의 타입이 됨.
         :@FunctionalInterface 어노테이션으로 더욱 명확히 명시 가능 (필수는아님)
     : 그러니까 구현할 메서드내용이 그리 복잡하지 않은 경우 구현 클래스생성하는 과정 없이 간단히 쓰려고 만든것
     
   : 쓰는 법
     단계1. 함수형 인터페이스 선언
     단계2. 함수형인터페이스타입의 레퍼런스 변수에 람다식을 할당
       : 람다식의 형식 ) (매개변수) -> {실행문장들}; 
       
   : 규칙
			1. 매변의 괄호 생략 가능한건 매변이정확히하나이고 && 매변의타입을명시하지 않은 경우에만 가능
        : 매변의 타입은 명시하든 안하든 상관없는데 보통 명시 안함 . 이미 인터페이스에서 제대로 선언되있으니까
			2. 중괄호 생략 가능한건 문장이 적확히 하나이고&& return 이 명시되지 않았을때만 만 가능
			3.  블럭 내부에 return 문 하나만 들어가는 경우엔 증괄호생략하고 return 을 명시하지 않으면 그 한문장은 자동으로 리턴값으로 간주됨
			 	: 그렇다고 중괄호가 생략되있다고해서 그 한문장이 반드시 리턴값인건 아님. void 타입임 아무것도 return 안하는 거임

    : 자바서 제공하는 유명한 함수형 인터페이스들
      : java.util.function.* 소속
        (1) Function<매개변수타입 , 반환타입>
          : 매개변수타입과 반환타입을 모두 지정 가능하다
          : 사용법
            Function<매변타입 , 반환타입> 변수명1 = 람다식; // 매변 딱 하나 있음 주의
            반환타입 변수명2 = 변수명1.apply(값); // Function 인터페이스 내부의 추상클래스는 public abstract 반환타입 apply(매개변수타입) ; 

          : Function 객체에 사용 가능한 개꿀기능 메서드
            : 합성기능 ( g(x) --> f(x) ---> f(g(x)) 같은거 )
              1. public Function andThen(Function f)
                : 대상으로 사용된 객체가 먼저 실행되고 arg로 사용된 객체가 그걸 받아 실행하는 형식의 Function객체를 반환한다.
                : ex) Function<String , Integer> func3 = func1.andThen(func2);  // func2 == func1 을 실행한 결과를 func2 에 대입하여 실행한 걸 내용으로 하는 객체
              2. public Function compose(Function f)
                : arg 로 사용된 객체가 먼저 실행되고 대상으로 사용된 객체가 그걸 받아 실행하는 형식의 Function 객체를 반환한다
                : ex ) Function<String , Integer> func3 = func1.andThen(func2);  // func2 == func2 을 실행한 결과를 func1 에 대입하여 실행한 걸 내용으로 하는 객체
                
        (2) Predicate<매개변수타입>
          : 매개변수타입은 지정할  수 있는데 반환값은 무조건 불값이다
          : 사용볍
            Predicate<매변타입> 변수명1= 람다식; // 매개변수 딱 하나 있고 리턴값은 불값이여야됨을 주의
            boolean 변수명2 = 변수명1.test(값); //Predicate 인터페이스 내부의 추상클래스는 public abstract boolean test(매개변수타입); 
          : Predicate 객체에 사용 가능한 개꿀기능
            : 논리 조합 가능
              1. and : 객체1.and(객체2)
              2. or : 객체1.or(객체2)
              3. negate : 객체1.negate( ); // 객체1의 불값을 반전시킨다.


        (3) Consumer<매개변수타입>
            : 매개변수타입을을 지정가능하고 반환값은 없다(값 소비만 한다고 해서 consumer 인거다)
            : 사용법
              Consumer<매변타입> 변수명1 = 람다식 ; // 매변딱하나고 리턴값은 없음을 주의
              변수명1.accept(값) // Consumer 인터페이스 내부의 추상클래스는 public abstract void accept(매변타입);
                                    // 소비만 하는걸 허락하겠단 의미로 암기

        (4) Supplier<반환타입>
              : 반환타입만 지정가능하고, 매개변수는 아예없다(값을 배풀기만 한다고해서 supplier 인거다)
              : 사용법
                Supplier<반환타입> 변수명1 = 람다식;
                반환타입 변수명2 = 변수명1.get(); // Supplier 인터페이스의 추상메서드는 public abstract 반환타입 get();
                                                    // 가져오겠단 의미의 get
          
