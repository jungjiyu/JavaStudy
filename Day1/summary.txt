양진석 강사
	개인 이메일) b-b0317@naver.com

	수업자료) http://naver.me/FBDAsFgJ
		: 비밀번호 - kg1234


프레임워크
	:  개발을 편하게 해주는 도구. 재사용이 가능하게끔 협업화 된 형태로 클래스들을 제공함.
	: 장점
		: 코드를 일일이 만들지 않아도 되어 효율적
		: 프레임워크의 틀에 맞춰 개발하므로 개발자기리 일관된 코드 작성 가능.
	
라이브러리
	: 자주 사용되는 클래스들을 잘 정리한 클래스(코드) 의 집합. 프레임 워크의 재료.
		: 그러니까 얘는 뼈대고, 라이브러리는 첨가물 느낌임

스프링 프레임워크
	: 자바 엔터프라이즈 개발을 편하게 해주는 오픈 소스 경량급(==가벼운) 애플리케이션 프레임워크
		: EJB Enterprise Java Bean 라는 프레임워크를 사용했었는데 쓰기도 어렵고 비용 부담이 넘 컷었다. 이걸 보완한게 스프링이다. 겨울을 지나 봄이 왔다는 뜻.

	: 특징
		1. 경량 컨테이너다
			: 스프링은 자바 객체를 직접 관리(객체 생성, 소멸과 같은 라이프 사이클을 관리)하기 때문에, 우리는 스프링으로부터 필요한 객체를 얻어올 수 있다.

		2. POJO Plain Old Java Object 방식이다
			: POJO >> 단순 자바 Object. 
				: 특정 인터페이스를 구현하거나 상속을 받지 않고 기존에 존재하는 라이브러리 등을 지원하기에 용이하고 객체가 가볍다. 의존성이 없고, 유지보수가 편리


POJO
	: IoC/DI, AOP , PSA 를 통해서 달성할 수 있다는 것.
	: Plain Old Java Object 란, 순수한 오래된 자바 객체. 즉 , 자바로 생ㅇ성하는 순수한 객체.
		: 그러니까 객체지향적거란거

	: 근데 객체라고 해서 다 POJO 프로그래밍인건 아니고, 다음의 규칙을 지켜야한다
		1. 자바 이외의 다른 기술을 활용한거면 안된다.
		2.



		3. IoC(Inversion of Control) 을 지원한다
			: IoC 는 제어의 흐름을 바꾸는 역할을 한다. 메서드가 객체의 호출 작업을 개발자가 결정하는게 아니라, 외부에서 결정한다. 객체의 의존성을 역전시켜 객체 간의 결합도를 줄이고 유연한 코드를 작성할 수 있게 하여 가독성 및 코드 중복, 유지 보수를 편하게 할 수 있다.
				: 의존성 >> 어떤 객체를 사용하기 위해서 다른 객체까지 필요한 것
					ex) A 객체를 사용하기 위해 B 객체가 필요하다면 A 객체는 B 객체에 의존하는 것 
			: 스프링이 모든 의존성 객체를 스프링이 실행될때 다 만들어주고 필요한 곳에 주입시켜줌으로써 제어의 흐름을 사용자가 컨트롤하는것이 아니라 스프링에게 맞겨 작업을 처리하게 된다.
				: 그러니까 A 객체를 사용하기 위해 직접 B 클래스를 import 하고 객체 만들고서야 사용 가능한게 아니라 그냥 A 객체를 사용하기만 하면 spring 이 내부적으로 B 객체를 제공한다

		4. DI Dependency Injection 을 지원한다
			: 의존성 주입.말 그대로 객체가 서로 의존하는 관계가 되도록 의존성을 주입 한다는 뜻
				: 각각의 계층이나 서비스들 간의 의존성은 프레임워크가 서로 연결되게 해준다.
				: IoC 에서 DI 의 역할은 각 클래스 사이에 필요로 하는 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동 연결해주는거다  

			: DL Dependency Lookup
				: 의존성 검색, 
				: 컨테이너는 객체를 관리하기 위해 별도의 저장소에 빈을 저장한다. 개발자들이 컨테이너에서 제공하는 API 를 이용하여 사용하고자 하는 빈을 검색하는 방밥이다. 

		5. AOP OfProgramming 관점지향 프로그래밍 을 지원한다
			: 여러 모듈에서 공통적으로 사용하는 기능의 경우 분리하여 관리한다.

		6. 확장성이 높다
			: 수많은 라이브러리가 스프링에서 지원된다.

의존성이 뭔데

의존성 주입
	: A 객체서 B 객체를 덩고 싶다 >> 스프링이 주입해준다.


		5. 스프링은 확장성이 높다


--------------------------------------------------------------------------------------------------------------------------------------
STS Spring Tool Suite 
	: 이클립스 기반으로 스프링 어플리케이션을 개발하기 위한 IDE << 그러니까 이클립스에 스프링 기능 추가한거
	: 현재는 STS4 까지 나왔는데 STS4 에서는 레거시 프로젝트를 지원하지 않기 때문에 STS3 를 다운받는다
		: 절차
			1. spring.io/tools 사이트 스크롤 해서 sts3 에서 하이퍼링크(..wiki) 누름 >> 3.9.18 의 window 버전 다운로드
			2. 해당 파일의 압축은 '반디집'으로 푸는게 좋다(그냥 풀면 파일명이 넘 길다고 에러 난다)
				: 주의 >> 나중에 모든 설정 다 끝내면 sts-3.9.18.Release  '빼곤' 다 지워도 되는데 다 설정하기도 전에 지워버림 에러난다.
			3. sts-bundle 폴더 >> ' sts-3.9.18.Release ' 폴더 로 이동하여 STS. ini 파일 수정 >> STS 에서 사용할 JDK와 인코딩 방식을 UTF-8로 수정하자
				(1) vm (Virtual Machine) 을 jdk 로 설정
					: -vmargs 위에다 아래를 적음
						: jdk 파일의 bin 폴더 까지의 경로를 저장 (인터넷 자료들에서는 C:\Program Files\Java\jdk-21\bin\javaw.exe 까지 명시하게 되어있는데 bin 폴더까지의 경로만 설정해줘도 괜찮음)
						-vm
						 C:\Program Files\Java\jdk-21\bin

				(2) 인코딩 방식을 UTF-8 로 설정
					: 맨 끝에 아래를 추가
						-Dfile.Encoding=UTF-8

			4. sts-3.9.18.Release 와 같은 계층에 'tomcat 디렉터리' 와 '워크 스페이스를 담을 껍데기 폴더' 를  만들고, 그 껍데기 폴더의 내부엔 내부에 워크 스페이스를 ㅎ생성한다
			5.  sts-3.9.18.Release  내의 sts.exe 실행해봄
				: 근데 한가지 문제점은 언젠가부터 sts3 에서 레거시 프로젝트를 생성할때 별도로 MVC 템플릿을 제공하지 않는다. 따라서 우리가 추가적으로 API 설치를 해야된다

			6. 공유 자료로 나눠준 https-content.xml 을 다운로드 받는다
			7. 워크 스페이스의 .metadata 디렉터리로 들어가고 , plugins 디렉터리로 들어가고, 거기서 org.springsource.ide.eclipse.commons.content.core 이름의 디렉터리 가서 다운로드 받았던  https-content.xml  를 넣는다
				: 왜그런지 모르겠ㅈ만 내 워크 스페이스엔 org.springsource.ide.eclipse.commons.content.core 폴더가 없어서 내가 걍 직접 그 이름으로 폴더를 만들고 거기에 다운로드 받은 https-content.xml 파일을 집어넣었다 (결과적으론 별 문제 없이 MVC 프로젝트 템플릿 생성가능해짐)


			8. sts.exe 누르고 서버 설정(tomcat 9.0) 한다 && 서버 설정한다
				1. 이때 http port 번호 8282 로 설정한다 (안해도 되긴 하는데 혼잡할 수 있어서)
				2. serverlocation 을 2번째 선택란(use tomcat installation) 을 체크, Server options 를 (기존 체크박스는 그대로 냅두고) publish module contexts to seperate XML files 체크한다
				3. . window-preferences-buffer 에서 버퍼 사이즈를 100만 (1000000)으로 변경한다
					: 안그러면 서버가 안돌아가더라

			9. window-preferences-encoding쳐서 나오는 란에서 일일이(css, jsp 같은 것도) default encoding 을 utf-8로 설정
				:ㅈㄴ 불편한게 spring 은 ms949 가 기본으로 되있어서 우리가 """꼭""" 기본 encoding 설정을 utf-8 로 바꿔줘야됨
				
			10. 끝


	
-------------------------------------------------------------------------------------------------------------------------

웹 프로젝트 MVC 생성하기
	1. SpringMVCproject 으로 생성하기 클릭, 제목 지음
	2. 중간에 requires donwload of 16608 bytes 창 나오는데 정상이니까 겁먹지x. 확인 클릭 
	3. 기본 패키지 작성 >> ' 최상위도메인.회사명.프로젝트명 ' 로 3 그룹으로 , '.' 을 기준으로 구분해 지음
		: 프로젝트 명은 곧 ContextPath 가 됨
		: ex) com.java.test

	4. 다 됬으면 프로젝트의 project facet 설정에서 java 버전을 11  로 맞춰줘야됨
		: ㅈㄴ 멍청한게 인식을 못함 (나의 경우 설정이 디폴트 21 로 되있었음)
-------------------------------------------------------------------------------------------------------------------------



	
