
프레임워크
	:  개발을 편하게 해주는 도구. 재사용이 가능하게끔 협업화 된 형태로 클래스들을 제공함.
	: 장점
		: 코드를 일일이 만들지 않아도 되어 효율적
		: 프레임워크의 틀에 맞춰 개발하므로 개발자기리 일관된 코드 작성 가능.
	
라이브러리
	: 자주 사용되는 클래스들을 잘 정리한 클래스(코드) 의 집합. 프레임 워크의 재료.
		: 그러니까 얘는 뼈대고, 라이브러리는 첨가물 느낌임

스프링 프레임워크
	: 자바 엔터프라이즈 개발을 편하게 해주는 오픈 소스 경량급(==가벼운) 애플리케이션 프레임워크
		: EJB Enterprise Java Bean 라는 프레임워크를 사용했었는데 쓰기도 어렵고 비용 부담이 넘 컷었다. 이걸 보완한게 스프링이다. 겨울을 지나 봄이 왔다는 뜻.

	: 특징
		1. 경량 컨테이너다
			: 스프링은 자바 객체를 직접 관리(객체 생성, 소멸과 같은 라이프 사이클을 관리)하기 때문에, 우리는 스프링으로부터 필요한 객체를 얻어올 수 있다.

		2. POJO Plain Old Java Object 방식이다
			: POJO >> 단순 자바 Object. 
				: 특정 인터페이스를 구현하거나 상속을 받지 않고 기존에 존재하는 라이브러리 등을 지원하기에 용이하고 객체가 가볍다. 의존성이 없고, 유지보수가 편리

		3. IoC(Inversion of Control) 을 지원한다
			: IoC 는 제어의 흐름을 바꾸는 역할을 한다. 메서드가 객체의 호출 작업을 개발자가 결정하는게 아니라, 외부에서 결정한다. 객체의 의존성을 역전시켜 객체 간의 결합도를 줄이고 유연한 코드를 작성할 수 있게 하여 가독성 및 코드 중복, 유지 보수를 편하게 할 수 있다.
				: 의존성 >> 어떤 객체를 사용하기 위해서 다른 객체까지 필요한 것
					ex) A 객체를 사용하기 위해 B 객체가 필요하다면 A 객체는 B 객체에 의존하는 것 
			: 스프링이 모든 의존성 객체를 스프링이 실행될때 다 만들어주고 필요한 곳에 주입시켜줌으로써 제어의 흐름을 사용자가 컨트롤하는것이 아니라 스프링에게 맞겨 작업을 처리하게 된다.
				: 그러니까 A 객체를 사용하기 위해 직접 B 클래스를 import 하고 객체 만들고서야 사용 가능한게 아니라 그냥 A 객체를 사용하기만 하면 spring 이 내부적으로 B 객체를 제공한다

		4. DI Dependency Injection 을 지원한다
			: 의존성 주입.말 그대로 객체가 서로 의존하는 관계가 되도록 의존성을 주입 한다는 뜻
				: 각각의 계층이나 서비스들 간의 의존성은 프레임워크가 서로 연결되게 해준다.
				: IoC 에서 DI 의 역할은 각 클래스 사이에 필요로 하는 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동 연결해주는거다  

			: DL Dependency Lookup
				: 의존성 검색, 
				: 컨테이너는 객체를 관리하기 위해 별도의 저장소에 빈을 저장한다. 개발자들이 컨테이너에서 제공하는 API 를 이용하여 사용하고자 하는 빈을 검색하는 방밥이다. 

		5. AOP OfProgramming 관점지향 프로그래밍 을 지원한다
			: 여러 모듈에서 공통적으로 사용하는 기능의 경우 분리하여 관리한다.

		6. 확장성이 높다
			: 수많은 라이브러리가 스프링에서 지원된다.

의존성이 뭔데

의존성 주입
	: A 객체서 B 객체를 덩고 싶다 >> 스프링이 주입해준다.


		5. 스프링은 확장성이 높다



STS Spring Tool Suite 
	: Spring 개발에 최적화 되도록 만든 IDE	
		: 이클립스 + 스프링
		: 이클립스 기반으로 스프링 어플리케이션을 개발하기 위한 개발 환경
	: STS4 는 레거시 프로젝트가 없기 때문에 레거시 프로젝트가 있는 가장 최신 벚전인 STS3를 다운 받는다
		: spring.io/tools 사이트 스크롤 해서 sts3 에서 하이퍼링크(..wiki) 누름 >> 3.9.18 의 window 버전 다운로드
		: 레거시프로젝트란?

		: 압축 풀면 sts-bundle 폴더 >> ' sts-3.9.18.Release ' 폴더 가 있는데 이것만 쓴다. 나머지 폴더는 다 삭제해도 좋다.
			: 기존 이름(sts-3.9.18.Release ) 은 바꿔도 좋다
			: 압축 풀떄 경로가 넘 길어서 오류 난다고 하면 빈딪집에서 설치하고 그걸 풀면 된다.

		: STS. ini 파일 수정 >> STS 에서 사용할 JDK와 인코딩 방식을 UTF-8로 수정하자
			1. vm (Virtual Machine) 을 jdk 로 설정
				: -vmargs 위에다 아래를 적음 << jdk 파일의 bin 폴더 까지의 경로를 저장 (인터넷 자료들에서는 javaw.exe 까지 명시하게 되어있는데 bin 폴더까지의 경로만 설정해줘도 괜찮음)
					-vm
					 C:\Program Files\Java\jdk-21\bin

			2. 인코딩 방식을 UTF-8 로 설정
				:
				
sts.exe 클릭


레거시 프로젝트- 템플릿으로 MVC 프로젝트 나와야됨

서버 설정에서 xml 파일 동기화 시키겠다고 하기

consol 버퍼 사이즈를 100만으로 바꿈, 그리고 서버 실행

	
------------------------------------------------------


왜그런지 모르겠ㅈ만
org.springsource.ide.eclipse.commons.content.core 폴더가 없어서 내가 걍 직접 그 이름으로 폴더를 만들고 거기에 다운로드 받은 https-content.xml 파일을 다운로드 받음

window-preferences-encoding쳐서 나오는 란에서 일일이(css, jsp 같은 것도) default encoding 을 utf-8로 설정
	ㅈㄴ 불편한게 spring 은 ms949 가 기본으로 되있어서 우리가 꼭 기본 encoding 설정을 utf-8 로 바꿔줘야됨

------------------------------------------------------


POJO
	: IoC/DI, AOP , PSA 를 통해서 달성할 수 있다는 것.
	: Plain Old Java Object 란, 순수한 오래된 자바 객체. 즉 , 자바로 생ㅇ성하는 순수한 객체.
		: 그러니까 객체지향적거란거

	: 근데 객체라고 해서 다 POJO 프로그래밍인건 아니고, 다음의 규칙을 지켜야한다
		1. 자바 이외의 다른 기술을 활용한거면 안된다.
		2.



https://peachcong.tistory.com/52



	:
