Maven 메이븐 
	>> 프로젝트의 전체적인 라이프 사이클 관리 도구
	>> Maven 은 내가 사용할 라이브러리 뿐 아니라 해당 라이브러리 작동을 위해 필요한 하위 라이브러리 까지 네트워크 통해 다운 받아준다,
	>> 플러그인을 기반으로 동작한다.
		: 플러그인 >> 다른 리소스를 편리하게 설치 가능하게 해주는, 해당 프로그램을 확장 가능하게 해주는 프로그램
	>> 프로젝트 객체 모델(Project Object Model: POM) 이라는 개념을 바탕으로 한다
	>>  pom.xml


 <project>와 </project> 태그 사이에 모든 정보를 기술한다
			:아래를 따로 작성 필요하다. 오타의 위험이 있으므로 걍 복붙하자

<build> <-- 빌드 관련 설정-->
		<plugins> <-- 플러그인 대한 전체적 설정 시작 -->

			<plugin> <-- 플러그인 중 특정 플러그인 설정 -->
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<!-- 
				<configuration> : 플러그인의 실행옵션 설정
				자바컴파일러를 11버전으로 지정한다.
				 -->
				<configuration>
					<source>11</source>
					<target>11</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>  




  <!--  <dependencies> 태그 안에 의존 라이브러리를 작성한다. 각각의 의존 라이브러리 정보는 <dependency> 태그 안에 작성한다  -->
  <dependencies>
  
  <!-- spring context 모듈 -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.23</version>
</dependency>
  
  
   </dependencies>




Maven 프로젝트의 구조
	src/main/java
		: java 소스 파일 (클래스, 인터페이스)
	src/main/resources	
		: 설정 파일( 빈.xml , pom.xml )
	





직접 생성한 application.xml 에 아래와 같이 주어지는 beans 태그 내부에 IoC 컨테이너에게 알려주ㄹ고 하는 bean 을 정의하면 된다.
	: 일종의 DTo?? a

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"> </beans>



	: bean 태그는 '기본적으로' jsp의 < jsp:useBean> 태그와 똑같다. bean 을 생성하는거고, 생성할때  id 속성과 class 속성을 명시해주어야한다.
		: ex) <bean id="bbq"  class="com.spring.di01.BBQChicken"/>


	: bean 태그는 단순히 생성만 시켜둘 수도 있지만, 생성한 다음 spring 이 자동적으로 DI 하게 할 수 있따
		1. 생성자 부분의 arg 에 bean 객체 집어넣기
			: ex) 
	<bean id="myOrder"  class="com.spring.di01.ChickenOrder">
		<constructor-arg>
			<ref bean ="bbq"/> 
		</constructor-arg>	
	</bean>


		: bean 태그 내부에 property 태그를 사용하면 객체및 데이터 주입이 가능하다

			: ex) 
	<bean id="myOrder"  class="com.spring.di01.ChickenOrder">
		<property name = "???? ">
			<ref bean ="???"/> 
		<ptoperty>	
	</bean>





		GenericXmlApplicationContext context = new GenericXmlApplicationContext("classpath:applicationConfig01.xml"); // 문자열로 설정파ㅏ일 위치 지정
		ChickenOrder order3 = context.getBean("myOrder",ChickenOrder.class); 






	<bean id="student"  class="com.spring.di02.Student">
		<property name="studentID"> <!-- 기본 타입 의 경우 property 사이에 value 태그 적는다 -->
			<value>20241029</value> <!--  value 사이에 적는다 -->
		</property>
		
		
		<property name="name"> <!-- String 도 객체이지만 기본 타입을 ㅊ취급당한다-->
			<value>홍길동</value> <!--  value 사이에 적는다 -->
		</property>
		
	<!-- 	<property name = "name" value="홍길동"></property>  기본타입 같은 경우 이렇게도 가능하다 -->
	
		<property name = "age" value="20"></property>
		<property name = "major" value="컴터공학"></property>
		
		
		
		<!--  리스트 넣기 -->
		<property name = "circles" >
			<list>
				<value>밴드</value>
				<value>축구</value>
				<value>사진</value>
				<value>독서</value>
			</list>
		</property>
		
		
	</bean>




ref 로 bean 주고 싶을떈bean 속성을 사용ㅎ나다.

		<property name = "student" ref="student"/>

는

		<property name="student">
					<ref bean ="student"/> 
		</property>
와
같은 소리다




property 태그>> bean 을 생성할떄 해당 클래스의 setter 계열 메서드를 사용하여 필드값을 채워주는거다.
	: bean 태그의 자식 태그로 쓰인다
		: 얘는 속성으로 그냥 퉁 못친다

	: 속성
		1. name >> 해당 객체의 인스턴스 필드명
			: setter 메서드를 이용하는 원리이므로 반드시 해당 클래스에 setter 메서드를 생성해놔야된다

		2. value 혹은 ref
			: 사실 value 나 ref 는 property, constructor-arg 의 자식 태그들로 따로 명시해서 써야되는건데.   특이하게도 이렇게 속성화 시켜서 쓸 수 있는거다
				: 그러니까 
				
					<property name="name"> 
						<ref bean="student"></ref> 
					</property>
				
				랑
					<property name="name" ref="student" /> 

				랑 같은 소린거다 			

			: value  >> set 하려는 필드가 일반 타입일 경우 이 속성에 값을 할당하여 표기한다
				: 만약 이걸 따로 자식 태그로써 쓰고 싶으면 시작-끝 태그 사이에 해당 값을 쓰면 된다
				: ex) <value>19</value> 
				***: 왜 그런진 모그렜는ㅔ list 의 경우 좀 하는 방식이 다르다 << tb continued 
		
			: ref >> set 하려는 필드가 레퍼런스 타입일 경우 이 속성에 값을 할당하여 표기한다
				: 만약 이걸 따로 자식태그로써 쓰고 싶으면 bean 속성에 해당 bean 객체명을 할당하면된다
					: 시작- 끝 태그 사이에 딱히 뭘 적진 않는다
					: ref의 속성명이 하필이면 bean 인거는 그냥 value 처럼 단순 시작-끝 태그 사이에 명시하기엔 넘 가벼워보이고, 이 파일에서 ref 받을건 bean 밖에  없어서 그런듯 ? 
				: ex) <ref bean="student"/> 



	: constructor-arg 와 동시에 사용이 가능하다

property 태그건, constructor-arg 태그건 일반타입값을 넣을때는 value 를 쓰고, 레퍼런스값을 넣을떄는 ref 속성을 쓴다   



개꿀팁
	: id 의 경우 내가 직접 맘대로 적어도 되는거고
	: name 의 경우 이미 있는 필드 명 같은걸 사용하는거라 정확히 사용해야한다
	: 대부분 자식 클래스 태그를 부모 태그의 속성명으로 간단화 하여 쓸 수 있는 것 같다
	: 



어엇 그런데 이게 해당 클래스의 생성자부분에서만 가능한것 같디! 기본 생성자가 없으므로 prameter 만 못쓴다고 하는거 보면

헷갈리는거

attribute
property
parameter





스프링은 기본적으로 객체들을 싱글톤화 시켜서 관리해준다
	: 싱글톤 -- 조회할때마다 클라이언트에게 같은 빈을 반환해준다.



조회할때마다 다른 빈을 얻고 싶다고 하면 설정 파일에서 해당 bean 을 생성하는 태그에서 scope 를 "prototype" 로 설정하면 된다
	: 근데 쓸일 별로 없다.
	: 참고로






// 스프링 설정 파일로 둥록 시키기 
// 스프링 IoC 컨테이너가 해당 클래스 파일을 
// 스프링 설정파일로 인식하여 사용할 수 있도록 해당 클래스 위에 @Configuratoin 어노테이션을 붙여준다
	// 느낌이 jsp 에서 해당 페이지를 에러 페이지로 등록 시키는거랑 비슷한 느낑미다
public class ApplicationConfig {
	

}

: configuration 처리할 클래스 파일은 따로 java 파일로 만든다.
: 주의) 어노테이션도 import 해줘얗된다.

	// 빈 등록을 시키는게 목적이다 > 메소드를 만든다. 반환 타입을 해당 빈 객체의 타입으로 한다.
	// 그리고 bean 을 생ㅅㅇ하는 메서드 위에는 @Bean 태그를 단다 << 얘도 마찬가지로 import ㅍ;ㄹ요
		// 스프링이 관리하는 빈 객체로 등록하는 것
	


// 다른 bean 객체를 arg 로 하는 경우 이미 해당 bean 객체를 생성하는 메소드가 정의되어ㅓ있으니 걍 그거 호출한다
	@Bean
	public PetService myPetService() {
		PetService petService = new PetService(myPet());
		return petService;
	}



	// 생성자 부분에 해당 config 파일을 적는다
	AnnotationConfigApplicationContext context 
	= new AnnotationConfigApplicationContext(ApplicationConfig.class);
	
	Pet pet = context.getBean("myPet",Pet.class); // 메서드의 이름으로 등록이 되어진다. .java 를 이용한 설정에선


	@Bean(name="petService") // 그런데 직접 이름을 설정할 수도 잏ㅆ따.


근데 쓸꺼면 xml 을 쓰지, 딱히 java 를 쓰진 않는다.


c:생성자의 name sapce
p: property 의 namespace
----------------------------------------------------------------------
ArrayList<String> list = new ArrayList<String>();
		
list.add("사과");
list.get(1);
list.size();
list.contains("사과"); //true, false
 list.remove("사과"); // 제거



----------------------------------------------------------------------

alt + shift + s >> 자동 만드는 창 

ctrl + space >> import 기능






