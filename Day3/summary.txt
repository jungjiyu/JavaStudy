
	<bean id="student"  class="com.spring.di02.Student">
		<property name="studentID"> <!-- 기본 타입 의 경우 property 사이에 value 태그 적는다 -->
			<value>20241029</value> <!--  value 사이에 적는다 -->
		</property>
		
		
		<property name="name"> <!-- String 도 객체이지만 기본 타입을 ㅊ취급당한다-->
			<value>홍길동</value> <!--  value 사이에 적는다 -->
		</property>
		
	<!-- 	<property name = "name" value="홍길동"></property>  기본타입 같은 경우 이렇게도 가능하다 -->
	
		<property name = "age" value="20"></property>
		<property name = "major" value="컴터공학"></property>
		
		
		

		
		
	</bean>




ref 로 bean 주고 싶을떈bean 속성을 사용ㅎ나다.

		<property name = "student" ref="student"/>

는

		<property name="student">
					<ref bean ="student"/> 
		</property>
와
같은 소리다




property 태그>> bean 을 생성할떄 해당 클래스의 setter 계열 메서드를 사용하여 필드값을 채워주는거다.
	: bean 태그의 자식 태그로 쓰인다
		: 얘는 속성으로 그냥 퉁 못친다

	: 속성
		1. name >> 해당 객체의 인스턴스 필드명
			: setter 메서드를 이용하는 원리이므로 반드시 해당 클래스에 setter 메서드를 생성해놔야된다

		2. value 혹은 ref
			: 사실 value 나 ref 는 property, constructor-arg 의 자식 태그들로 따로 명시해서 써야되는건데.   특이하게도 이렇게 속성화 시켜서 쓸 수 있는거다
				: 그러니까 
				
					<property name="name"> 
						<ref bean="student"></ref> 
					</property>
				
				랑
					<property name="name" ref="student" /> 

				랑 같은 소린거다 	

			: 주의 ) 일반타입값(value) , 빈객체(ref)를 제외한 다른 값과 관련한 자식 태그들은 속성으로 퉁 못치고 실제로 자식 태그로써 써야한다

			: value  >> set 하려는 필드가 일반 타입 혹은 String 타입일 경우 이 속성에 값을 할당하여 표기한다
				: String 까지 일반 타입으로 퉁쳐주는거 주의(ref 로 하는게 아님)
				: 만약 이걸 따로 자식 태그로써 쓰고 싶으면 시작-끝 태그 사이에 해당 값을 쓰면 된다
				: ex) <value>19</value> 


			: ref >> set 하려는 필드가 빈객체타입일 경우 이 속성에 값을 할당하여 표기한다
				: 만약 이걸 따로 자식태그로써 쓰고 싶으면 bean 속성에 해당 bean 객체명을 할당하면된다
					: 시작- 끝 태그 사이에 딱히 뭘 적진 않는다
				: ex) <ref bean="student"/> 


			: 기타 컬렉션 프레임 관련
				: https://kdg-is.tistory.com/entry/Spring-XML-Collection-List-Set-Map-Property-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95

		<!--  리스트 넣기 -->
		<property name = "circles" >
			<list>
				<value>밴드</value>
				<value>축구</value>
				<value>사진</value>
				<value>독서</value>
			</list>
		</property>

		

	: constructor-arg 와 동시에 사용이 가능하다

property 태그건, constructor-arg 태그건 일반타입값을 넣을때는 value 를 쓰고, 레퍼런스값을 넣을떄는 ref 속성을 쓴다   



개꿀팁
	: id 의 경우 내가 직접 맘대로 적어도 되는거고
	: name 의 경우 이미 있는 필드 명 같은걸 사용하는거라 정확히 사용해야한다
	: 대부분 자식 클래스 태그를 부모 태그의 속성명으로 간단화 하여 쓸 수 있는 것 같다
	: 



어엇 그런데 이게 해당 클래스의 생성자부분에서만 가능한것 같디! 기본 생성자가 없으므로 prameter 만 못쓴다고 하는거 보면

헷갈리는거

attribute
property
parameter





스프링은 기본적으로 객체들을 싱글톤화 시켜서 관리해준다
	: 싱글톤 -- 조회할때마다 클라이언트에게 같은 빈을 반환해준다.



조회할때마다 다른 빈을 얻고 싶다고 하면 설정 파일에서 해당 bean 을 생성하는 태그에서 scope 를 "prototype" 로 설정하면 된다
	: 근데 쓸일 별로 없다.
	: 참고로






// 스프링 설정 파일로 둥록 시키기 
// 스프링 IoC 컨테이너가 해당 클래스 파일을 
// 스프링 설정파일로 인식하여 사용할 수 있도록 해당 클래스 위에 @Configuratoin 어노테이션을 붙여준다
	// 느낌이 jsp 에서 해당 페이지를 에러 페이지로 등록 시키는거랑 비슷한 느낑미다
public class ApplicationConfig {
	

}

: configuration 처리할 클래스 파일은 따로 java 파일로 만든다.
: 주의) 어노테이션도 import 해줘얗된다.

	// 빈 등록을 시키는게 목적이다 > 메소드를 만든다. 반환 타입을 해당 빈 객체의 타입으로 한다.
	// 그리고 bean 을 생ㅅㅇ하는 메서드 위에는 @Bean 태그를 단다 << 얘도 마찬가지로 import ㅍ;ㄹ요
		// 스프링이 관리하는 빈 객체로 등록하는 것
	


// 다른 bean 객체를 arg 로 하는 경우 이미 해당 bean 객체를 생성하는 메소드가 정의되어ㅓ있으니 걍 그거 호출한다
	@Bean
	public PetService myPetService() {
		PetService petService = new PetService(myPet());
		return petService;
	}



	// 생성자 부분에 해당 config 파일을 적는다
	AnnotationConfigApplicationContext context 
	= new AnnotationConfigApplicationContext(ApplicationConfig.class);
	
	Pet pet = context.getBean("myPet",Pet.class); // 메서드의 이름으로 등록이 되어진다. .java 를 이용한 설정에선


	@Bean(name="petService") // 그런데 직접 이름을 설정할 수도 잏ㅆ따.


근데 쓸꺼면 xml 을 쓰지, 딱히 java 를 쓰진 않는다.


c:생성자의 name sapce
p: property 의 namespace
----------------------------------------------------------------------
list 의 간단한 사용법 
(1) 생성: List<String> list = new List<String>();
(2) 추가: list.add("사과");
(3) 추출: list.get(1);
(4) 요소 개수: list.size();
(5) 특정 요소 포함 여부: list.contains("사과");
(6) 특정 요소 삭제: list.remove("사과"); 



----------------------------------------------------------------------

getter setter 등 필드 관련 메서드 만드는 창  >> alt + shift + s 
import 기능>>ctrl+ shift + o
자동완성>>ctrl + space
	






