참고로 자꾸 T T 거리는데 내가 봤을 땐 type 의 T 인듯


Stream클래스는 java.util.stream.Stream 이다

일반 스트림 == Stream
기본형 특화 스트림 == IntStream || LongStream || DoubleStream

Stream 
	: 물론 람다식을 메서드 참조로 대체 가능한 경우 얼마든지 써도 됨
	중간연산
		1. Stream<타입>filter( 람다식)
			:  람다식 결과가 true 인것만 남긴다

		2. Stream<타입> distinct( )
			: 스트림의 중복 제거

		3. Stream<타입> skip(int n)
			: 처음 n개의 요소를 건너뛴다(버린다)

		4. Stream<타입> limit(int n)
			: 요소를 처음 n 개만 사용한다
		5. Stream<타입 > peek(람다식)
			: forEach 처럼 요소 단위로 차례대로 수행하는데 스트림의 요소를 소모하지 않아 이후에 또 연산이 가능하다

		6. Stream<타입> map(람다식)
			: 기존 요소를 새로운 요소로 매핑 시키는 메서드
			: 대부분 클래스에서 특정 필드만 뽑아낼 때 사용




IntStream<타입> mapToInt( )
	: IntStream 이 아닌 스트림( 기본 스트림인 Stream 뿐 아니라 DoubleStream , LongStream 도)을 IntStream 으로 변환해준다

LongStream<타입> mapToLong( )
	: LongStream 이 아닌 스트림( 기본 스트림인 Stream 뿐 아니라 IntStream , DoubleStream 도)을 LongStream 으로 변환해준다

DoubleStream<타입> mapToDouble( )
	: DoubleStream 이 아닌 스트림(  기본 스트림인 Stream 뿐 아니라 IntStream , LongStream 도) DoubleStream 으로 변환해준다

Stream<타입> mapToObj()
	: 특화스트림을 기본스트림인 Stream 으로 변환해준다




		7. Stream<타입> sorted( Comparator c )
			: 스트림의 요소를 정렬한다
			: Comparator를 따로 입력하지 않으면 기본 오름차순으로 정렬되는 듯
				: 어떤 다른 클레스 이므로 나중에 araboza



	최종연산 ) 최종연산은 스트림의 요소를 소모해 결과를 도출하기 떄문에 최종연산한 그 스트림은 더이상 ㅈ재사용이 불가. << 내가 생각했을때 더이상 스트림 연산이 불가하단 소리 인듯( 뒤에 더이상 메서드 못쓴다)

		1. void forEach( 람다식 )
			: 각 요소 단위로 람다식 실행
		2. 요소타입 sum( )
			: 각 요소 다 더함
		3. long count( )
			: 스트림의 요소 개수 반환
		4. 요소타입 max( ), min( )
			: 스트림의 최대,소값 반환
		5. 배열타입 toArray( ) 
			: 배열로 반환
		6. boolean anyMatch( 람다식 )
			: 배열의 요소 중 람다식을 만족하는 요소가 하나라도 있는지 검사
		7. boolean allMatch(람다식)
			: 모든 배열 요소가 람다식을 만족하는지 검사
		8. boolean noneMatch(람다식)
			: 모든 배열 요소가 람다식을 만족하지 않ㄴ는지 검사

		9. reduce( 람다식 )
			: 요소를 하나씩 줄여가며 검사

		10. collect( 람다식 )
			: 요소를 수집 ?? << 뭔솔

// 배열 뿐 아니라 컬렉션에서도 사용이 가능하다 stream을
	:Arrays.asList( 값의 나열); >> 값들을 정리해서 리스트 객체를 반환
	:컬렉션객체.stream() >>해당 컬렉션 객체를 대상으로 Stream 을 생성함 . 이 stream( ) 은 컬렉션 내부에 구현되있음 



스트림의 특징
	: 자료의 대상과 관계없이 동일한 연산을 수행
	: 한번 생성하고 사용한 스트림은 재사용 불가
	: 스트림의 연사능ㄴ 기존자료를 변경하지 않음
	: 스트림의 연산은 중간, 최종으로 분류됨



활용
	: 스트림을 활용하여 여행객 비용계산
	: 패키지 여행 떠나는 고객있음. 여행 비요은 15세이상은 100만원, 그 미만은 50만원
	: 고객 세명이 패키지 여행을 간다고 했을때 비용계산과 고객명단 검색등을 스트림을 활용하여 구현

컬렉션

ArrayList
	: 순서가 있다 
		: 정렬하면 편하다.
List
	:



 Collectorrs : 여러가지 유용한 메서드를 제공해주는 클래스
	// Collectors.toList( ) : 스트림의 요소들을 리스트로 수집
	// Collectors.toSet() : 스트림의 요소들을 setㅇ르 ㅗ수집
	// Collectors.toMap() : 스트림의 요소들을 map으르 ㅗ수집

	// collect( ): 스트림의 요소들을 컬렉션에 모드는 작업을 수행하는 메서드


	:컬렉션타입 변수명 =  스트림객체.collect(Collectors.to컬렉션명( )); // 스트림을 컬렉션으로 변환할 수 있다



스트림 변환

네트워크기본지식 : net + work == 그물 + 일 의 합성어. 그물망처럼 연결된 통신 이용 형태 == 두 대 이상의 컴퓨터들을 연결하고 서로 통신할 수 있는 통신망  == 통신망

	: 소켓프로그래밍
	: Server , Client<< 상대적인 개념임 (고정되있는 개념이 아님)
		: Server == 데이터를 제고ㅇ하는 컴터
		: Client == 데이터를 요청하는 컴퓨터
		
		: 카카오 서버실에 불남 >> 카카오톡  서버실에 불이 난 것 >> 서버실의 컴터가 데이터를 제공해야되는데 뭐 그게 안되는 것

	: Request , Resposnse
		: Request == ㄷ이터를 요청하는 행위
			: 카카오톡 다운 받는것 같은 행위
		: Response == 데ㅔ이터를 제공하는 행위

네트워크의 범위
	: LAN 근거리 통신망
		: 한정된 좁은 거리에 구성된 네트웨크 . 유지비용이 적게 든다. 속도 빠르다
		: 공유기 같은거

	: WAN 장거리 통신망
 		: 물리적으로 멀리 떨어진 LAN 과 LAN끼리 연결한 형태
			: 넓은 범위가 서울 그정도
		: 초기 설치 비용은 적게 들지만 서비스 업체서 관리하기 때문에 유지 비용이 많이 든다. 속도 느리다. 오류 더 많다


: 인터넷
	: WAN 과 WAN 을 연결한 것
	: 전세계의 LAN들 , WAN 들을 연결하여 만든 거대한 통신망
	: submarine cable
		:  과거에는 위성으로 통신을 했었다 근데 온도가 낮ㅈ아지면 통신이 잘 안된다 그리고 내구성도 않좋다 근데 요즘에는 해저 케이블로 연결하여 통신망이 구성되있다
		: 그래서 빠른 인터넷 유징이 가능하다
		: submarine cable map 으로 확인이 가능하다
		: 해저 케이블 상어 << 특이하게 상어들이 간혹 케이블을 뜯어먹는다
		: 내부로는 광섬유로 이루어져있음. 빛으로 통신한다는 것

프로토콜
	: 네트워크 상의 공용어. 영어 느낌 . 통신 규약. 약속 .
	: 종류가 ㅈㄴ 많음 .
		: IP == internet protocol == 인터넷에 연결되있는 각 컴터에 부여받는 숫자로 이루어진 "고유""주소"로 , 네트워크 통신을 위해 IP 를 사용함
		: 0~255 숫잘 3개 점으로 구분하여 표시하는 방법
		: XXX.XXX.XXX.XXX 총 12개의 숫자 >> 약 43 억개의 주소를 표현 가능


	Ipv4 버전의 주소 범위
		:  XXX.XXX.XXX.XXX  형태
		: 가장 흔함
	Ipv6 요즘에 씀. 인구가 넘 많으니까 (중간의 버전5는 망했음)
		: 사실상 무한대의 주소를 표현 가ㅡㄴㅇ





따로 인터넷 정리----------
스트림 Stream
	: 데이터의 흐름
	: 배열 or 컬랙션 객체에 메서드를 적용하여 복잡한  내용을 간결하게 실행이 가능하다. 그리고 메서드의 매개변수 부분에 꽤나 자주 람다를 활용된다.
	: 병렬 처리(multi-threading)도 가능하다. 

내가 봤을때 Stream 객체 생성 방법
	case1, 컬렉션을 대상으로 하는 Stream
		: 컬렉션객체명.stream( )
			: 해당 컬렉션의 stream( ) 메서드를 사용하요 Stream 객체를 생성한다

	case2. 배열을 대상으로 하는 Stream
		: Arrays.stream(배열명)
			: java.util.Arrays의 stream() 메서드를 사용하여 stream 객체를 생성한다.

