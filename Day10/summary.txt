<input type="button" onclick="joinFormCheck()" value="회원가임"> 

var id = document.joinForm.id.value; //  << 현재 문서에 접근하는 객체
document.joinForm.id.focus(); // 아이디 쪽으로 커서를 이동시킴
document.joinForm.submit();


<jsp:setProperty name="dto" property="*"  />  // 바인딩한다


-0---------------------------------------------------------------------------------

오늘 수업
	(1) rs = conn.excuteQuery( ); 에서 쿼리문을 실행 실패했다고 해서 null 값이 반환되진 않는다고 한다
		: excuteQuery( ) 의 반환 값은 never null 이라고 명시되어있다
		: 만약에 쿼리문이 성공적으로 실행됬는지 알고 싶으면 if(rs != null)   를 하면 안되고,   if( rs.next( ) ) 로 해야된다. 

	(2) 자바 클래스를 html 기반 파일(jsp) 로 가져오고 싶으면 그 클래스를 import 해주면 된다.
		: 	memberDAO dao = memberDAO.getInstance(); 하기 위해서는 'ctrl+space' 눌러서 <%@page import="com.jsp.member.memberDAO"%> 불러와야된다. 
 

	(3) DAO 클래스는 자바빈 클래스가 아니니까 걍 직접 그 클래스 import 하고, 미리 만들어둔 getInstance( ) 를 이용해 객체를 생성한다 ( 싱글톤으로 해놔서 생성자를 직접 쓰진 못함)


	(4) 생성한 DAO 클래스의 객체를 대상으로 DAO 클래스의 db에 접근하는 메서드를 사용하여 CRUD 한다
		: dto 가 data transfer Object 라고 해서 jsp 와 servlet 이 통신할때 마다 dto 를 거쳐 가는게 아니라 데이터 덩어리의 저장과 수집이 필요할때만 쓰는거다. 

	(5) regDate >> Timestamp 타입

	(6) 스크립트에서의 리다이렉션
		1. window 객체 이용
			:window.location = 'login.jsp' ; 

		***2. history 객체 이용
			: 바로 이전 페이지로 돌아가게 하는거면 개추


			<td><input type="text" name="id" value="<%=id %>"></td>

에서 "" 붙이기

	<input type="hidden" name="id" value="<%=id %>">
hidden 속성




	: 세션관련메서드
		(1) setAttribute(String name, Object value)
			: 세션 객체에 이름과 값을 맵핑하여 저장
			: Object >> 자바의 최상위 클래스. 모든 객체를 저장이 가능
			: ex) 	session.setAttribute("sessionName","sessionValue");


		(2) Object getAttribute(String name)
			: 세션 속성명이 name 인 속성의 값을 Object 타입으로 리턴
			: 만약에 존재하지 않으면 null 반환
			: Object 타입이라 강제 형변환 시켜줘야됨
				String name = (String)session.getAttribute("sessionName");


		(3) Enumeration getAttributeNames()
			: 세션 속성의 이름들을 Enumeration 객체 타입으로 리턴함
			: 세션 안에 저장된 이름들의 목록을 enumeration 타입으로 가져옴

		(4) String getId()
			: 세션에 할당된 고유 식별자를 String 타입으로 리턴
			: JsessionId 값으로 저장됨 << 서버가 자동 생성 시키는 쿠키 << 세션 쿠키로 저장됨.
				: 클라이언트와의 연결시 클라이언트별로로 한 브라우저랑 고유한 아이디어가 생성됨. 따라서 웹 브라우져 별로 생성되어진 세션을 구분 가능
				: 세션 쿠키 << 자동 생성되고 웹 브라우져 창 닫을 시 소멸되는 쿠키.
				: 그래서 창 닫으면 로그인 자동으로 해제된는거다. JsessionId 가 나가버리니까
					: 웹 브라우져 별로는 유지된다 << edge 에서 로그인해놨어도 chrome 에선 소용없다
				

		(5) int setMaxInactiveInterval(int interval) 세션 유지시간을 초 단위로 설정한다.
			: 기본 30분
			: 비활성화 간격. 아무것도 안하고 있어도 되는 최대 시간. 해당 시간이 지나면 소멸된다.

		(6) getMaxInactiveInterval() 세션의 유효시간을 초 단위로 얻는다.
		(7) removeAttribute(String name) 세션 속성명이 name인 객체를 삭제한다.
		(8) invalidate() 세션의 모든 데이터를 삭제한다
			: 세션을  무효화한다고 보면된다.
			: 세션 쿠키 까지 없어지는거라 세션 객체를 날려버린다고 봄 된다.

		(9) IsRequestedsessionId Valid( )
			: session객체가 유효한지(=request 에 sessionID 값이 함께 담겨왔는지) 확인
				: session 객체가 유효하면  true, 아님 false 반환
			: request 객체를 대상으로 사용하는거다
			: ex) 
				if(request.isRequestedSessionIdValid()){ 
					out.print("유효 세션 있음<br>");
				}else{
					out.print("유효 세션 없음<br>");
				}



		
					



