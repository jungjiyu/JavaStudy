<input type="button" onclick="joinFormCheck()" value="회원가임"> 

var id = document.joinForm.id.value; //  << 현재 문서에 접근하는 객체
document.joinForm.id.focus(); // 아이디 쪽으로 커서를 이동시킴
document.joinForm.submit();


<jsp:setProperty name="dto" property="*"  />  // 바인딩한다


-0---------------------------------------------------------------------------------

오늘 수업
	(1) rs = conn.excuteQuery( ); 에서 쿼리문을 실행 실패했다고 해서 null 값이 반환되진 않는다고 한다
		: excuteQuery( ) 의 반환 값은 never null 이라고 명시되어있다
		: 만약에 쿼리문이 성공적으로 실행됬는지 알고 싶으면 if(rs != null)   를 하면 안되고,   if( rs.next( ) ) 로 해야된다. 

	(2) 자바 클래스를 html 기반 파일(jsp) 로 가져오고 싶으면 그 클래스를 import 해주면 된다.
		: memberDAO dao = memberDAO.getInstance(); 하기 위해서는 'ctrl+space' 눌러서 <%@page import="com.jsp.member.memberDAO"%> 불러와야된다. 
		: jsp 에서 자바기반 클래스면 무조건 DTO(=자바빈)만 쓸 수 있는 건 아니다. 걍 스크립트릿 내부에서 .java 에서 평소에 했듯이 하면 된다

	(3) DAO 클래스와 DTO 클래스 각각이 사용되는 경우 
		DAO 클래스
			: DAO 클래스에 정의된 메서드를 활용해서 db에 CRUD 해야하는 경우 사용

		DTO 클래스
			: 데이터 덩어리를 하나로 묶어서 저장해 관리하고 싶을 때 사용


	(4) regDate >> Timestamp 타입
		: javax.sql.Timestamp

	(5) 스크립트에서의 리다이렉션
		1. window 객체 이용
			:window.location = 'login.jsp' ; 

		***2. history 객체 이용
			: 바로 이전 페이지로 돌아가게 하는거면 개추


	(6) 자바 변수를 태그의 속성 값에 할당하기
		: " " 의 "내부"에 표현식태그 열고 변수명을 쓴다
			<td><input type="text" name="id" value="<%=id %>"></td>

	(7) input 에서 type="hidden" 하면 입력란은 숨겨지지만 submit 할때 같이 제출된다.
		<input type="hidden" name="id" value="<%=id %>">

	(8) input 에서 type이 "submit" 도 아닌데 value 값을 주면 해당 값을 디폴트값으로 입력 필드에 띄울 수 있따
		: 잊진 않았겠지만 input="submit" 일 경우의 value 속성 값은 전송 버튼에 띄울 문구를 의미한다

	(9) 자바빈 객체 만든다고해서 항상 그 속성 값을 모두 채워서 만들 필욘 없다. 필수적인 것만 채워서 만들어도 된다.

	(9) session 객체에 일반적인 값만 바인딩 가능한게 아니라 (객체를 참조하는) 레퍼런스 변수까지도 바인딩 가능하다.
		:memberDTO dto = dao.getMember(id);
		session.setAttribute("member",dto);

	(10) session 객체에 바인딩된 레퍼런스 변수는 일반적인 속성 값 뽑아낼 때와 다를것이 없다	
		: getAttribute( )의 반환타입은 object 이기에 해당 레퍼런스 변수 타입으로 강제형변환하는거 잊으면 안된다.
		ex) memberDTO dto = (memberDTO) session.getAttribute("member");
		

	(10) 매핑, 바인딩 차이
		매핑 Mapping 
			: 한 집합과 다른 집합을 전체적으로 연결하는 것

		바인딩 binding
			: 선택한 요소를 특정 데이터와 연결


단편적 예로 사다리 게임을 들자면

선택지가 1, 2, 3이 있고

상품이 10만원, 5만원, 2만원이 있다 칩시당..

​

사다리에 선을 그으면 선택지와 상품이 연결이 되죠.

1번 2만원

2번 10만원

3번 5만원

이게 매핑입니다.

​

그리고 선택을 하겠죠잉..

3번을 택해서 5만원을 받았습니다.

3번이 5만원으로 바뀌었죠.

이게 바인딩입니다.

​

매핑은 연결 행위 또는 연결 정보

바인딩은 연결된 대상으로의 치환

	(11) entity
		: 엔티티. 모델(= 프로그램 , 시스템)의 구성 요소
			ex)소스파일, 목적 파일 등등은 한 프로젝트의 엔티티 이다.


	(12) Enumeration 의 메서드
		1. hasMoreElements()
		2. nextElement()

	(13) 자바빈 scope
		: 자바빈 객체를 jsp:useBean 을 이용하여 생성했다고 해당 어플리케이션 내부에서 모두 사용 가능한게 아니다 . 객체 생성 당시에 scope 속성을 통하여 어느 범위까지 허용할 껀지 명시해야한다
		: 가능한 scope 값
			1. "page" >>  해당 웹 페이지를 벗어나면 소멸
				: scope 를 따로 명시하지 않고 생성시 default 로 지정되는 값
			2. "request" >> request에 대한 처리가 완료되면 소멸, 그전까진 모든 에플리케이션 내서 사용가능
			3. "session"	 >>	  session 종료시 소멸,, 그전까진 모든 에플리케이션 내서 사용가능
			4. "application"  >> 서버 종료되면 소멸, , 그전까진 모든 에플리케이션 내서 사용가능


	(14)

위와 같이 property = "*"로 설정하면 클라이언트에서 전송되어 오는 파라미터 값이 모두 같은 이름의 빈 객체의 속성 값으로 자동 할당



	: 세션관련메서드
		(1) setAttribute(String name, Object value)
			: 세션 객체에 이름과 값을 맵핑하여 저장
			: Object >> 자바의 최상위 클래스. 모든 객체를 저장이 가능
			: ex) 	session.setAttribute("sessionName","sessionValue");


		(2) Object getAttribute(String name)
			: 세션 속성명이 name 인 속성의 값을 Object 타입으로 리턴
			: 만약에 존재하지 않으면 null 반환
			: Object 타입이라 강제 형변환 시켜줘야됨
				String name = (String)session.getAttribute("sessionName");


		(3) Enumeration getAttributeNames()
			: 세션 속성의 이름들을 Enumeration 객체 타입으로 리턴함
			: 세션 안에 저장된 이름들의 목록을 enumeration 타입으로 가져옴

		(4) String getId()
			: 세션에 할당된 고유 식별자를 String 타입으로 리턴
			: JsessionId 값으로 저장됨 << 서버가 자동 생성 시키는 쿠키 << 세션 쿠키로 저장됨.
				: 클라이언트와의 연결시 클라이언트별로로 한 브라우저랑 고유한 아이디어가 생성됨. 따라서 웹 브라우져 별로 생성되어진 세션을 구분 가능
				: 세션 쿠키 << 자동 생성되고 웹 브라우져 창 닫을 시 소멸되는 쿠키.
				: 그래서 창 닫으면 로그인 자동으로 해제된는거다. JsessionId 가 나가버리니까
					: 웹 브라우져 별로는 유지된다 << edge 에서 로그인해놨어도 chrome 에선 소용없다
				

		(5) int setMaxInactiveInterval(int interval) 세션 유지시간을 초 단위로 설정한다.
			: 기본 30분
			: 비활성화 간격. 아무것도 안하고 있어도 되는 최대 시간. 해당 시간이 지나면 소멸된다.

		(6) getMaxInactiveInterval() 세션의 유효시간을 초 단위로 얻는다.
		(7) removeAttribute(String name) 세션 속성명이 name인 객체를 삭제한다.
		(8) invalidate() 세션의 모든 데이터를 삭제한다
			: 세션을  무효화한다고 보면된다.
			: 세션 쿠키 까지 없어지는거라 세션 객체를 날려버린다고 봄 된다.

		(9) IsRequestedsessionId Valid( )
			: session객체가 유효한지(=request 에 sessionID 값이 함께 담겨왔는지) 확인
				: session 객체가 유효하면  true, 아님 false 반환
			: request 객체를 대상으로 사용하는거다
			: ex) 
				if(request.isRequestedSessionIdValid()){ 
					out.print("유효 세션 있음<br>");
				}else{
					out.print("유효 세션 없음<br>");
				}




		
					



