
스트림 변환

네트워크기본지식 : net + work == 그물 + 일 의 합성어. 그물망처럼 연결된 통신 이용 형태 == 두 대 이상의 컴퓨터들을 연결하고 서로 통신할 수 있는 통신망  == 통신망

	: 소켓프로그래밍
	: Server , Client<< 상대적인 개념임 (고정되있는 개념이 아님)
		: Server == 데이터를 제고ㅇ하는 컴터
		: Client == 데이터를 요청하는 컴퓨터
		
		: 카카오 서버실에 불남 >> 카카오톡  서버실에 불이 난 것 >> 서버실의 컴터가 데이터를 제공해야되는데 뭐 그게 안되는 것

	: Request , Resposnse
		: Request == ㄷ이터를 요청하는 행위
			: 카카오톡 다운 받는것 같은 행위
		: Response == 데ㅔ이터를 제공하는 행위

네트워크의 범위
	: LAN 근거리 통신망
		: 한정된 좁은 거리에 구성된 네트웨크 . 유지비용이 적게 든다. 속도 빠르다
		: 공유기 같은거

	: WAN 장거리 통신망
 		: 물리적으로 멀리 떨어진 LAN 과 LAN끼리 연결한 형태
			: 넓은 범위가 서울 그정도
		: 초기 설치 비용은 적게 들지만 서비스 업체서 관리하기 때문에 유지 비용이 많이 든다. 속도 느리다. 오류 더 많다


: 인터넷
	: WAN 과 WAN 을 연결한 것
	: 전세계의 LAN들 , WAN 들을 연결하여 만든 거대한 통신망
	: submarine cable
		:  과거에는 위성으로 통신을 했었다 근데 온도가 낮ㅈ아지면 통신이 잘 안된다 그리고 내구성도 않좋다 근데 요즘에는 해저 케이블로 연결하여 통신망이 구성되있다
		: 그래서 빠른 인터넷 유징이 가능하다
		: submarine cable map 으로 확인이 가능하다
		: 해저 케이블 상어 << 특이하게 상어들이 간혹 케이블을 뜯어먹는다
		: 내부로는 광섬유로 이루어져있음. 빛으로 통신한다는 것

프로토콜
	: 네트워크 상의 공용어. 영어 느낌 . 통신 규약. 약속 .
	: 종류가 ㅈㄴ 많음 .
		: IP == internet protocol == 인터넷에 연결되있는 각 컴터에 부여받는 숫자로 이루어진 "고유""주소"로 , 네트워크 통신을 위해 IP 를 사용함
		: 0~255 숫잘 3개 점으로 구분하여 표시하는 방법
		: XXX.XXX.XXX.XXX 총 12개의 숫자 >> 약 43 억개의 주소를 표현 가능


	Ipv4 버전의 주소 범위
		:  XXX.XXX.XXX.XXX  형태
		: 가장 흔함
	Ipv6 요즘에 씀. 인구가 넘 많으니까 (중간의 버전5는 망했음)
		: 사실상 무한대의 주소를 표현 가ㅡㄴㅇ


	ip == 집주소
		: 서울시 종로구 .. 어느정도 같은 위치에 있는 사람들끼리는 ip의 앞부분(3번째까지) 는 같다. 젤 뒤는 다르지만
		: 인터넷에 부여되는 고유한 주소값
		: 


	OSI 모델 (open system interconnection)
		: 네트워크 기술의 기본이 되는 모델로 데이터 통신이 일어나는 네트워크 동작 과저ㅓㅇ을 7단계로 구분한 모델

	TCP/IP 모델: OSI 모데ㅔㄹ으ㄹ 기반으로 만들어진 (7계층 중) 4번째 계층 . 통신ㄴ하고자 하는 대상에게 데이터를 전달하기 위한 포장. 양방향 소통함. 편지봉투 느낌, ( != UDP << 일반 우편 느낌. 걍ㅇ 일방적으로 보내는)


네트워크 통신방식
	유니캐스트
		:1대1 통신방식. 가장 많이싸용하는 방식
		: 출발지 == 목적지여야됨
		: 개인 톡 느낌

	브로드캐스트 방식
		: 1: 전체로 통신하는 데이터 송신 서비스
		: 단톡방 느낌
		: 서버 클라이언트 간에 통신하는 서비스

포트번호
	 : 데이턴는 0,1로 케이블 타고 전달됨. 어떤 케이블 타고 데이터 전달할건지 정해야됨. 특정 프로세스 찾을 떄 사용하는 번호
	: 이미 사용중인포트번호는 또 못사용ㅇ함
	: 0<=<=65535범위
	:

package chap01;

//포트번호 확인하는 법
import java.net.ServerSocket;
import java.io.IOException;

public class Main {
	public static void main(String[] args) {
		for(int i = 0 ;i<65535;++i) {// 범위 대해 for문 돌림
			try {
				ServerSocket ss = new ServerSocket(i); // 각 포트번호 대해 소켓생성
				ss.close();// 만약 사용중이지 않음 예외 발생 안함
			}catch(IOException e) { // 만약 사용중인 포트번호면 예외 발생
				System.out.println(i+"는 현재 사용중인 포트번호");
			}
			
		}
	}

}


	: ServerSocket == 클라이언트 요청 받기 위한 준비물
		: 포트번호를 arg 로 하여 객체를 생성
	: Socket == 클라이언트 객체 느낌 . 클라이언트 소켓
		: ServerSocket 객체 를 대상으로 accept( ) 메서드를 사용하여 객체 생성
			: accept( ) == 클라이언트의 request 받아들이다
	: 


프로그램 소켓socket
	: 실행 중인 프로그램 간 통신하거나 컴터간 통신하기 위해 사용되는 가상의 장치	
	: 이미 만들어져있음

		
: Server <---> Cilient	

버퍼는 어느정도 데이터가 쌓여야지 반환하기 때문에 바로바로 데이터를 전송하기 위해선 flush() 개 필수

따로 인터넷 정리----------
스트림 Stream
	: 데이터의 흐름
	: 배열 or 컬랙션 객체에 메서드를 적용하여 복잡한  내용을 간결하게 실행이 가능하다. 그리고 메서드의 매개변수 부분에 꽤나 자주 람다를 활용된다.
	: 병렬 처리(multi-threading)도 가능하다. 

내가 봤을때 Stream 객체 생성 방법
	case1, 컬렉션을 대상으로 하는 Stream
		: 컬렉션객체명.stream( )
			: 해당 컬렉션의 stream( ) 메서드를 사용하요 Stream 객체를 생성한다

	case2. 배열을 대상으로 하는 Stream
		: Arrays.stream(배열명)
			: java.util.Arrays의 stream() 메서드를 사용하여 stream 객체를 생성한다.

