자바빈 >> jsp 에서 java 기반의 클래스 객체를 쉽게 사용하기 위함
	<jsp:useBean id="bean1" class="bean.BeanEx" scope="page"/>
	<jsp:setProperty name="bean1" property="age" value="25"/>
	<p><jsp:getProperty name="bean1" property="age"/></p>



DBMS  >>oracle, mysql .. 
	: 데이터 베이스 관리 시스템
	: Data Base Management System 



CRUD >> 기본적인 데이터 처리
	:  Create(생성), Read(읽기), Update(갱신), Delete(삭제)

레코드 : 한 행. 데이터 라인

JDBC 
	: java 기반 애플리케이션에서 db 의 접근과 사용을 용이하게 하는 java API
		: 일종의 라이브러리라고 봄 된다
	: Java DataBase Connectivity
		: connection . 데이터와 애플리케이션의 접점 느낌

	: 흐름
		: java application >> 하나의 JDBC API >> 하나의 JDBC Driver manager  >> 각 DBMS 만의 JDBC Driver 
			:DBMS 의 종류에 상관 없이 java application 을 실행할 수 있는 이우는 각 DBMS 를 위한 JDBC driver 가 존재하기 때문.
	

	: JDBC 연결 순서
		0. DBMS 의 "드라이버"가 있는 파일을 애플리케이션에 투입해서 로드할 수 있게 준비해두기 ( ojdbc.jar )
		1. JDBC 드라이버를 "로드"
			: Class.forName("드라이버");
				: 오타날 수 있으니 String driver="oracle.jdbc.OracleDriver"; 로 미리 적어놓고 driver 를 arg 로한다
				: Class 클래스의 정적 메서드인 forName 메서드 >> 풀패키지명 쓰면 해당하는 클래스를 메모리로 로딩해줌

		2. DriverManager 를 통하여 connection 객체 생성
			: Connection conn = DriverManager.getConnection(url , dbID,dbPW );
				: Connection 클래스의 객체 >> DB 와 연결성을 가지게 해주는 객체
				: DriverManager >> 로드된 JDBC 드라이버를 통하여 Connection 객체를 생성
				: URL , ID , PW 는 오타의 소지가 있으므로 미리 만들어둔다
					String url = "jdbc:oracle:thin:@localhost:1521:xe"; // 오라클의 기본 주소. 
					String dbID="C##JAVAUSER";
					String dbPW="java2024";	

		3. connection 객체를 통하여 Statement 객체를 생성(정확히는  PreparedStatement 객체이긴 함)
			: PreparedStatement pstmt = conn.prepareStatement(쿼리문);
				: connection 객체를 대상으로 , sql쿼리문을 arg 으로 하여 , PreparedStatement 객체를 생성
				: PreparedStatement 객체 >> 생성당시 arg 로 투입된 sql 쿼리문을 저장하고 있으며, 이를 실행 가능한 객체
					:<interface> Preparedstatement 
						:  sql 문장을 실행, 결과를 반환하는 기능을 캡슐화한 인터페이스
						: Statement 를 상속 받은 것이다 << 그래도 PreparedStatement 와 사용법이 살짝살짝 다르다

							: <interface> Statement
								: 주요 메서드 >> sql 문을 실행시킴
									(1)   executeQuery()
										: 결과값을 반환하는 sql 쿼리문을 실행할 경우 사용
										: select 문 같은
									(2) executeUpdate( )
										: (딱히 결과를 반환하지 목적으로 사용하지 않고) 내용 수정을 목적으로 하는 하는 sql 쿼리문을 실행할 경우 사용
										: insert, update , delete 같은

					: 사용 ex) 객체.excuteQuery(쿼리문)

		4. PreparedStatement 객체를 통하여 sql 쿼리문을 실행한 결과를 ResultSet 객체로 받음
			: ResultSet rs = pstmt.executeQuery() 혹은 pstmt.excuteUpdate( ) 
				: ResultSet >> PreparedStatement 의 쿼리문 실행 결과 반환 타입


		5. ResultSet 객체에서 결과를 꺼내서 활용하기	
			: while(rs.next()){
	
				String id = rs.getString("ID"); 
				String pw = rs.getString("PW"); 
				String name = rs.getString("NAME"); 
			}

			: ReusltSet 객체의 주요 메서드
				(1) next( ) 
					: 현재 행에서 다음 행으로 이동
					: 다음 레코드가 있는지 확인 후에 다음 레코드가 있다면 true, 없으면 false 를 반환

				(2) getXXX( column명 ) 
					: 각 레코드에서 원하는 column명을 arg 로 하여 "get타입"꼴의 (getter계열) 메서드 사용

		6. 연결 해제
			: 가장 최근에 사용했던 것부터 거꾸로 올라가면서 "finally 문 내부에서" 해제한다
			try{
				if (rs != null) rs.close();
		 		if (pstmt != null) pstmt.close();
		 		if (conn != null) conn.close();
			}catch(Exception e){}
				

			


