생성자는 메서드랑 다르다

new 뒤에있는거 생성자다

디폴트생성자 == 기본생성자 == arg 도, 블럭내용도 없는 생성자


디폴트 생성자는 명시적인 생성자가 있음 자동으로 추가되지 않는다	
	>> 디폴트 생성자를 사용하고 싶으면 따로 디폴트 생성자를 명시한다.

생성자 사용이유 >> 객체초기화

인터페이스 : 표준화된 작업 위해 사용
	: 기능 구현 없이 기능만을 모아둔것

interface 인터페이스명{
	상수(static final 생략시 자동 입력)
	추상메서드 ( abstract 생략  시 자도 ㅇ 입력)
}

추상메서드 
	 : 인터페이스를 상속받으면 무조건 추상메서드를 구현해야된다
강제성을 띤다
	: 추상메서드를 무조건 구현해야한다 . 다 구현할때까지 빨간줄 안없엊진다

인터페이스 필수적 절차
	: 인터페이스 내부에 반드시 필요한 상수 , 추상메서드 적는다
	: implements 할땐 반드시 다 구현한다

: 추상클래스(오로지 상속 목적)보다 더 설계를 위한 거다 

: 인터페이스를 사용하면 다중상속을 어느정도 구현 가능하다
=----------------------

다중상속을 하면 오버라이딩 된게 있을때 뭘 호출해야할지 우위를 결정할 수가 없어서 자반는 문법적으로 존나 엄격하기 때문에 다중상속을 못하게 제한하는거다(메서드의 모호성)

이는 인터페이스를 통하여 어느정도 해결이 가능하다

----------

----------------
극단적으로 동일 한 목적하에 동일한 기능을 수행하게끔 강제하는 것. 
