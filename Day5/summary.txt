클라이언트 <---> web server <---> web container <---> db
	: web server ) 클라이언트와 통신, 정적 처리
		: apache   
			:사실 찐 apahce 를 사용해야되긴 하는데 우린 apache tomcat 에서 제공되는 경량(?) apache 를 사용한다
	: WAS == web container ) 동적처리 >> jsp와 servlet 을 구동
		: apahce tomcat 
			: jsp , servlet >> 동적 웹 페이지를 만들기 위한 프로그래밍 기슐

--------------------------------------------------------------
jsp import 단축키 >> ctrl+space
servlet  import 단축키 >> ctrl+ shift+o
--------------------------------------------------------------
action 경로 비교
	servlet >> /contentpath/url맵핑
	jsp >> /contentpath/실제파일경로
--------------------------------------------------------------
contentType
	: 현재 페이지가 생성할 문서의 유형
	: ex ) text/html
--------------------------------------------------------------
배열 내용 출력 >> Arrays.toString(배열명)
컬렉션 내용 출력 >> 컬렉션명.toString()
--------------------------------------------------------------
서블릿에 url 맵핑하기

sol1: @WebServlet("/Student")
sol2: 
  <servlet> <!-- 특정 서블릿에 대한 참조 생성 -->
  	<servlet-name>studentFormServlet</servlet-name>
  	<servlet-class>com.java.servlet3.StudentForm</servlet-class>
  </servlet>
  
  <servlet-mapping> <!-- 서블릿 참조를 사용하여 특정 서블릿에  url 매핑 -->
  	<servlet-name>studentFormServlet</servlet-name>
  	<url-pattern>/Student</url-pattern>
  </servlet-mapping>
--------------------------------------------------------------
특정 서블릿에 초기 파라미터 부여하기 

sol1: @WebServlet(
	urlPatterns={ "/Student" },
	@WebInitParams={
		@WebInitParam(name="host", value="jiyu")
	} 

)

sol2: 
  --------------------------------------------------------------
초기값 구하기 << 부모 클래스에 정의된 메서드 이용
	: getInitParam("name명")
--------------------------------------------------------------
공유 초기 파라미터 만들기

sol1: 어노테이션으론 못함

sol2: 
<context-param>
	<param-name>firstInitalParam</param-name>
	<param-value>1111</param-value>
</context-param>
  
--------------------------------------------------------------
공유 초기 파라미터 가져오기

Servletcontext context= getServletContext( ); // getServletContext() >> 웹 애플리케이션의 경로를 반환
String val = context.getInitParam("firstInitalParam");

--------------------------------------------------------------
서블릿에서 기본적으로 해줘야되는것 >> 인코딩 방식과 컨텐트타입 지정
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");

--------------------------------------------------------------
--------------------------------------------------------------

JSP Java Server Page
	: 서블릿 기반의 서버 스크립트 기술
		: 서블릿 단점 보완
			1. 자바 코드를 바탕으로 하기 때문에 너무 많은 코드 필요 >> html 기반으로 간단히 함
			2.빌드를 항상 다시 해야됨 >> was 에서 자동 빌드함
	: HTML 코드 바탕, 중간중간에 java코드를 삽입하는 형식



	
	: jsp 태그의 종류
		
		1. <%  %>
			: scriptlet 스크립틀릿 ) JAVA 코드를 삽입한다
				
		2. <%! %>
			선언문) 전역변수 혹은 메서드 선언

		3. <%= %>
			: 표현식 ) 결과값을 클라이언트에게 출력
				: ex) <% out.print(10*10); %> == <%= 10*10 %>

		4.<%@ %>
			: 지시자 ) JSP 페이지 속성 지정
			: 사용 방법) <%@ 지시자명 속성1=값1...  > 이런식으로 쓴다
			: 지시자의 종류
				1. page: 해당 페이지의 속성을 지정
					속성
						(1) import
							<%@page import="java.io.PrintWriter"%>
						(2) language
							<%@page language="java"%>
						(3)contentType
							<%@page contentType="text/html"%>
						(4) pageEncoding
					: jsp 파일의 앞부분에 몰아서 적는 편
				2. include: 별도의 페이지를 현재 페이지에 삽입
				3.  taglib: 태그라이브러리의 태그 사용(jstl  을 사용하기 위해 지정)
			
			: 자바 파일이 아니기 때문에 ctrl+shfit+o 로 import 되진 않고 crtl+space 해야된다


		5. <%-- --%>
			: jsp 전용 주석 

		6. <jsp:action></jsp:action>
			: 페이지 삽입,공유, 자바빈 사용등





	: JSP 내장 객체
		: 걍 서블릿 내부서 쓰던 객체랑 똑같은 얘들이다
		1. request
			: "클라이언트로부터 입력받은 내용" 뿐 아니라 "웹 브라우져와 웹 서버의 정보"도 가져올 수 있다
			: 인스턴스 메서드
				String getParameter(name);
				String[ ] getParameterValues(name); //체크 박스 같은 경우
				Enumeration getParameterNames( ); 

				getServerName( )
				getContextPath( )
				getMethod( )
				getSession( )
				getProtocol( )
				getRequestURL( )
				getRequestURI( )
					; URI >> url 에서 context path 부터만 뽑아낸것 .ㄱ그러니까 URL 의 일부
						URL: http://localhost:8282/JspBasic/step02/request01.jsp
						URI: /JspBasic/step02/request01.jsp

		2. response : 클라이언트에게 응답할때 사용하는 객체	
			getCharacterEncoding()
			addCookie(Cookie)
				: 쿠키 지정
			sendRedirect(URL)
				
				: 특정 상황에서 조건에 따라 원하는 URL(페이지)로 이동	
				: 리다이렉트
					: 서버는 클라이언트의 요청에 대해 특정 url로 이동을 요청
					: 데이터 없이 단순 이동일때 주로 사용
						: 데이터 포함해서 이동하는건 form 의 action 값 같은거
				: redirect 쓰면서 데이터도 (get 방식으로 )전송할 수 있긴 함
					: url 끝에 쿼리 스트링 붙임 됨
					:  response.sendRedirect("OK.jsp") >> response.sendRedirect("OK.jsp?age="+age); 
					: 한글값을 쿼리스트링 붙이는 법 >> ans = URLEncoder.encode(ans,"UTF-8"); 한다
						: url 에는 ascii가 아닌 문자를 사용할 수 없다. 그래서 ascii 가 아닌 파라미터의 경우 인코딩을 해주어야한다
						: WARNING: 값이 [ok.jsp?ans=홍길동]인 HTTP 응답 헤더 [Location](이)가 유효하지 않은 값이므로 응답에서 제거되었습니다.

		3. out
			: 웹 브라우저로 출력하는 객체
				: 그러니까 서블릿에서 PrintWriter 로 받아서 out 만들어야했던걸 쓰는거다
				: out.print() 처럼 사용한다
		4. session	
			: 하나의 웹 브라우져 내에서 정보를 유지하기 위한 세션 정보를 저장하고 있는 객체
		5. page
		6. config
		7. exception


----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------

실습
	1. html 파일 하나랑 jsp 파일 3개생성
		 : html 파일 >> form 띄울 웹페이지
		: jsp 파일
			>> sendRedirect 쓸 파일 
				: 실질적으론 눈 깜짝할 사이에 다른 페이지로 이동하게 하므로 거의 안보임
			>> OK 결과 띄울 웹 페이지
			>> NO 결과 띄울 웹 페이지
---------------------------------------------------------------
jsp 액션태그
	: 어떤 동작을 하도록 지시하는 태그
	1. forward
		: 현재 페이지를 다른 페이지로 전환할 때 사용
			:jsp 페이지서 다른 jsp 페이지로 요청 처리를 전달할때 사용. 웹 브라우저의 주소는 처음 요쳥받은 jsp 주소로 유지. 요청 흐름이 이동할때 request, response 객체가 전달됨

		
	2. include
		: 현재 페이지를 다른 페이지로 삽입할 떄 사용
		: 지시자를 이용한 include 방식과 액션 태그를 이용한 include 방식이 있는거임
	3. param
		: forward 밑 include 태그에 data 전달을 목적으로 사용됨
		: 이름과 값으로 이루어져있음
		: ex) 
	<jsp:forward page ="foodOK.jsp">
		<jsp:param name="name" value="홍길동"/>
	</jsp:forward>


---------------------------------------------------------------
forward vs redirect
	: forward  >>웹 컨테이너 차원의 페이지 이동
		: 그러니까 중간에 클라이언트 안끼고 웹 컨테이너끼리 데이터 주고 받는거
		: 웹 컨테이너가 다른 웹 컨테이너에게 client 의 기존 request 를 forward 하고, 그 웹 컨테이너는 client 에게 response 를 한다. >> 그러니까 request 는 유지된다
		: 기존 url 유지
		: 그러니까 고객이 교촌치킨 본사에 치킨 배달달라고 전화 >> 교촌치킨 본사에서 직접 교촌치킨 가게에 주문을 넣어줌 >> 교촌치킨 가게에서 고객에게 치킨을 전달함
			: 고객은 교촌치킨 본사가 해당 케이스를 해결한줄 안다 

	: redirect >> 중간에 클라이언트 끼고 이동
		: 그러니까 다른 웹 컨테이너에서 관리하는 페이지로 이동
		: 기존 웹 컨테이너에서 클라이언트에게 redirection하고 클라이언트는 이를 받고 새로운 request 를 보내게 되어 다른 웹 컨테이너에서 해당 페이지가 열린다 >> 그러니까 새로운 request 가 생긴다  
		: 새로운 url 생성
		: 그러니까 고객이 교촌치킨본사에 치킨 배달달라고 전화 >> 교촌치킨본사에서 고객과 가까운 교촌치킨가게의 주소넘김 >> 고객이 교촌치킨 가게에 전화해서 치킨 받음

	: 기본 상식
		: 클라이언트가 서버에 request >> server 는 request 대해 respond 로 url 을 준다

	: 객체를 재사용한다 >> request, respond 객체가 유지된다.






---------------------------------------------------------------
include
	: 현태 문서에 다른 문서, 즉 다른 파일의 내용을 포함시켜 출력하는것

	: 하는 법
		sol1 . 지시자  >> include 지시어로 지정한 페이지의 소스가 그대로 복사된다
			: 실제로 해당 웹 페이지의 페이지 소스보기를 하면 다른 웹 페이지의 소스가 그대로 복사됬음을 알 수 있다
		sol2. 액션태그 >> 소스 코드가 복사되는 것이 아니라 "제어권" 자체가 include 액션으로 지정된 페이지로 넘어가기 때문에 그 페이지 실행시키고 그 페이지가 종료되면 다시 원래 페이지로 돌아온다

	: 두 방법의 차이
		: 지시자 include 는 주로 조각난 코드를 삽입하고자 할 때 사용된다. 요청한 소스코드를 텍스트에 포함해서 하나로 인식하여 컴파일한다.		
			: 서로 다른 파일ㅇ에서 선언한 변수도 다른 파일에서 사용이 가능하다
			: 메모리와 성능 면으로는 장점이 있다 .
		: 액션태그 include 는 각각의 소스 코드를 따로 컴파일 한다
			: 서로 다른 파일에서 선언한 변ㄴ수는 사용 불가능하다
			
	
---------------------------------------------------------------




1.맨위 지시자 내부의 contentType, PageEncoding , 헤드 부분의 charset , 바디 부분의 setCharacterEncoding , setContentType 의 차이점
	: 지시자 부분 >> request 객체의 contentType 결

2. 왜 	response.setContentType("html/text; charset=UTF-8"); 는 안해줌?
	: 일단 request 는 setCharacterEncoding 으로 UTF-8 지정해야된다 << post 방식이니까
	: 근데 response.setContentType 은 지정할 필요가 없다 << 위의 지시자 부분에서 contentType 이랑 pageEncoding 에서 이미 마크업되있어서 그렇다

3. 쿼리 스트링 작동 안됨
	: 한글이라서 그렇다
	: 이건 지시자 부분에 명시 되어있다고 해결되는게 아니다. 이건 url 이라서 다로 해줘야된다.


4. forward 액션 태그 썼을때 왜 url 은 이동 안하는데 title 은 이동하는 거임

5. 서블릿 doPost 메서드 내부의 
	setContentType("text/html; charset=UTF-8"); ==  setContentType("text/html"); + setCharacterEncoding 인거임?
	
	만약에 맞으면 response.setContentType("text/html; charset=UTF-8");  쓰면 response.setCharacterEncoding("UTF-8"); 는 안써도 되는 거임?


		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");

---------------------------------------------------------------

웹 페이지의 형태
	: 맨 윗부분 >> 메뉴부분, 잘 안바뀜
	: 중간 부분 >> 메뉴 클릭에 따라서 바뀐다
	: 맨 아랫부분 >> 회사 정보 부분 

	: 겹치는 거 일일이 쓰기 귀찮으니 맨 윗부분, 맨 아랫부분을 include 시킨다. 각각의 페이지에 일일이 쓰는게 아니라 >> 유지 보수가 쉬워진다
---------------------------------------------------------------
실습: 
.jspf 확장자
 .jspf == Java Server Page Fragement
 	: jsp의 일부분으로 다른 jsp 에 포함되도록 만들어졌다
 	: 반복 사용되는 것을 jspf 로 뽑아서 jsp 파일에서 include 한다

	: 이렇게 확장자를 설정했을때의 이점
		: 개발자 입장에서도 이해하기 쉽고 이클립스 자체적으로도 조각난 파일이라고 
---------------------------------------------------------------
쿠키 cookie
	: 연결이 끊겼을때 어떤 정보를 지속적으로 유지하기 위한 수단
		: 그러니까 내가 뭐했는지 남기는거


------------------------------------
<jsp:param name="name" value="홍길동"/> 에서 끝 "/" ?
a href="#" 에서 # ? 

------------------------------------

서블릿에서 UTF-8로 인코딩을 설정하는 데 사용되는 두 가지 메소드인 `response.setCharacterEncoding("UTF-8")`와 `response.setContentType("text/html; charset=UTF-8")` 를 둘 다 사용하는 이유
	>> `response.setContentType("text/html; charset=UTF-8")`: 이 메소드는 클라이언트에게 전송되는 콘텐츠의 유형과 문자 인코딩을 설정합니다. 
​	>> 따라서 `response.setContentType("text/html; charset=UTF-8")`을 사용하면 콘텐츠 유형과 문자 인코딩을 모두 설정할 수 있습니다. 그러나 `response.setCharacterEncoding("UTF-8")`을 따로 사용하는 이유는 이 메소드를 통해 문자 인코딩을 명시적으로 설정함으로써 코드의 가독성을 높이고, 서블릿의 다른 부분에서도 이를 참조하여 사용할 수 있기 때문입니다.


