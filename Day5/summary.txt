-----------------------------------------------------
jsp import 단축키 >> ctrl+space
servlet  import 단축키 >> ctrl+ shift+o

--------------------------------------------------------------
  --------------------------------------------------------------
초기값 구하기 << 부모 클래스에 정의된 메서드 이용
	: getInitParam("name명")

--------------------------------------------------------------
공유 초기 파라미터 가져오기

Servletcontext context= getServletContext( ); // getServletContext() >> 웹 애플리케이션의 경로를 반환
String val = context.getInitParam("firstInitalParam");

--------------------------------------------------------------
서블릿에서 기본적으로 해줘야되는것 >> 인코딩 방식과 컨텐트타입 지정
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");

--------------------------------------------------------------

<jsp:action></jsp:action>: 페이지 삽입,공유, 자바빈 사용등
	jsp 액션태그 : 어떤 동작을 하도록 지시하는 태그


	: JSP 내장 객체
		: 걍 서블릿 내부서 쓰던 객체랑 똑같은 얘들이다
		1. request
			: 인스턴스 메서드
				String getParameter(name);
				String[ ] getParameterValues(name); //체크 박스 같은 경우
				Enumeration getParameterNames( ); 


		2. response : 클라이언트에게 응답할때 사용하는 객체	
			sendRedirect(URL)
				


---------------------------------------------------------------
forward vs redirect
	: forward  >>웹 컨테이너 차원의 페이지 이동
		: 그러니까 request 는 유지된다 << 객체를 재사용한다
			:따라서 기존 url 유지
		: 하는 방법 >> forward 액션 태그를 사용하고 page 속성을 통해 경로 할당
			<jsp:forward page="resultPage.jsp"/>

		: 중간에 param 액션 태그로 데이터도 함께 전송이 가능

	: redirect >> 중간에 클라이언트 끼고 이동
		:그러니까 새로운 request 가 생긴다  
		: 새로운 url 생성
		: 하는 방법 >> response객체의 메서드인 sendRedirect() 를 이용 
			

	: 객체를 재사용한다 >> request, respond 객체가 유지된다.






---------------------------------------------------------------
include
	: 현태 문서에 다른 문서, 즉 다른 파일의 내용을 포함시켜 출력하는것

	: 하는 법
		sol1 . 지시자  >> include 지시어로 지정한 페이지의 소스가 그대로 복사된다
			: 실제로 해당 웹 페이지의 페이지 소스보기를 하면 다른 웹 페이지의 소스가 그대로 복사됬음을 알 수 있다

	<%@include file="include2.jsp" %>

		sol2. 액션태그 >> 소스 코드가 복사되는 것이 아니라 "제어권" 자체가 include 액션으로 지정된 페이지로 넘어가기 때문에 그 페이지 실행시키고 그 페이지가 종료되면 다시 원래 페이지로 돌아온다
	<jsp:include page="header.jspf"/>

	: 두 방법의 차이
		: 지시자 include 는 주로 조각난 코드를 삽입하고자 할 때 사용된다. 요청한 소스코드를 텍스트에 포함해서 하나로 인식하여 컴파일한다.		
			: 서로 다른 파일ㅇ에서 선언한 변수도 다른 파일에서 사용이 가능하다
			: 메모리와 성능 면으로는 장점이 있다 .
		: 액션태그 include 는 각각의 소스 코드를 따로 컴파일 한다
			: 서로 다른 파일에서 선언한 변ㄴ수는 사용 불가능하다
			
	

---------------------------------------------------------------
실습: 
.jspf 확장자
 .jspf == Java Server Page Fragement
 	: jsp의 일부분으로 다른 jsp 에 포함되도록 만들어졌다
 	: 반복 사용되는 것을 jspf 로 뽑아서 jsp 파일에서 include 한다

	: 이렇게 확장자를 설정했을때의 이점
		: 개발자 입장에서도 이해하기 쉽고 이클립스 자체적으로도 조각난 파일이라고 

--------------------------------
https://doublesprogramming.tistory.com/63

https://javacan.tistory.com/entry/88

https://m.blog.naver.com/kimkwon429/220765215503

https://velog.io/@bflykky/jspparam-%ED%83%9C%EA%B7%B8%EB%A5%BC-%ED%86%B5%ED%95%9C-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%A0%84%EC%86%A1-%EC%8B%9C-%EC%9D%B8%EC%BD%94%EB%94%A9%EB%94%94%EC%BD%94%EB%94%A9-%EB%AC%B8%EC%A0%9C
