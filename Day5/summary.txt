-----------------------------------------------------
jsp import 단축키 >> ctrl+space
servlet  import 단축키 >> ctrl+ shift+o

--------------------------------------------------------------
  --------------------------------------------------------------
초기값 구하기 << 부모 클래스에 정의된 메서드 이용
	: getInitParam("name명")

--------------------------------------------------------------
공유 초기 파라미터 가져오기

Servletcontext context= getServletContext( ); // getServletContext() >> 웹 애플리케이션의 경로를 반환
String val = context.getInitParam("firstInitalParam");

--------------------------------------------------------------
서블릿에서 기본적으로 해줘야되는것 >> 인코딩 방식과 컨텐트타입 지정
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");

--------------------------------------------------------------

<jsp:action></jsp:action>: 페이지 삽입,공유, 자바빈 사용등
	jsp 액션태그 : 어떤 동작을 하도록 지시하는 태그


	: JSP 내장 객체
		: 걍 서블릿 내부서 쓰던 객체랑 똑같은 얘들이다
		1. request
			: 인스턴스 메서드
				String getParameter(name);
				String[ ] getParameterValues(name); //체크 박스 같은 경우
				Enumeration getParameterNames( ); 


		2. response : 클라이언트에게 응답할때 사용하는 객체	
			sendRedirect(URL)
				


---------------------------------------------------------------
개헷갈리는 속성명 file, page 
	: 암기 tip 
		1. 논리적인 이유 : 지시자의 경우 지시자명으로 page 가 이미 쓰이고 있기에 속성명으로 page 가 있담 굉장히 불편할 것. 따라서 file 을 속성명으로 사용
		2. 단순 암기: 파지 페액 (파지. (우유)팩)
	: 액션 태그에서 url 할당 받는 속성은 page 
	: 지시자 태그에서 url 할당 받는 속성은 file 
---------------------------------------------------------------
forward vs redirect
	: 헷갈리지 말아야할것은 forward, redirect 는 ( include 태그 처럼 액션 태그와 지시자 태그 2가지 모두 존재하는게 아니라 ) 각각 한가지 방법으로밖에 구현 못한다.

	: forward  >>웹 컨테이너 차원의 페이지 이동
		: 그러니까 기존 request 객체(+ 물론 response 객체도)는 유지된다 << 객체를 재사용한다
			:따라서 기존 url 유지
			:주의) 그렇다고 이전 페이지에서 선언했었던 변수들을 사용할 수 있단 건 아니다
				: 아무리 스크립트릿 내부서 선언한 변수는 해당 웹페이지에서만 사용이가능하다
		: 하는 방법 >> forward 액션 태그를 사용하고 page 속성을 통해 경로 할당
			<jsp:forward page="resultPage.jsp"/>

		: 중간에 param 액션 태그로 데이터도 함께 전송이 가능
		: 작동 방식 ) 액션 태그를 만나면 제어권이 "영구적으로" 해당 페이지로 넘어간다. 
			: include 액션 태그처럼 다시 제어권을 돌려받는게 아니다
				: 따라서 forward 액션 태그 이후의 소스 코드는 실행되지 않는다
			: https://do-dam.tistory.com/49

	: redirect >> 중간에 클라이언트 끼고 이동
		:그러니까 새로운 request 가 생긴다  
			:따라서 새로운 url 생성

		: 하는 방법 >> response객체의 메서드인 sendRedirect() 를 이용
			: response 객체를 사용하는 것에서 알 수 있듯이 일단 해당 웹페이지와의 연결은 끊어지고(response 받음 연결 끊어짐), 클라이언트가 response 로 받은 url 을 토대로 새로 request 를 보내는거다. 
			repsonse.sendRedirect("이동페이지");

		: 작동 방식 ) 







---------------------------------------------------------------
include
	: 포함 시킨다는 의미가 강하다

	: 하는 법
		sol1 . 지시자  >> include 지시어로 지정한 페이지의 소스코드가 그대로 복사되고, 원래 포함되있었던 것처럼 하나로 컴파일 된다.
			: 실제로 해당 웹 페이지의 페이지 소스보기를 하면 다른 웹 페이지의 소스가 그대로 복사됬음을 알 수 있다
			: 애초에 하나로 컴파일 되는 것 이기 때문에 다른 웹 페이지에서 선언했던 변수도 그대로 사용 가능하다

			<%@include file="include2.jsp" %>

		sol2. 액션태그 >> 소스 코드가 복사되는 것은 아니고 "제어권" 을 지정된 페이지로 넘긴 후 그 페이지가 종료되면 다시 제어권을 받는다.
			: 각 파일을 따로 컴파일 한다
				: 물론 다른 페이지서 선언한 변수는 사용 못한다
			<jsp:include page="header.jspf"/>

	: 쉽게 외우는 tip
		: 지시자는 뭔가 정적인작업(=컴파일 이전에 일어나는 일)을 많이 처리한다 (당장 include 만 해도). 따라서 지시자 include 는 소스코드를 그대로 포함시키는거다.

---------------------------------------------------------------
실습: 
.jspf 확장자
 .jspf == Java Server Page Fragement
 	: jsp의 일부분으로 다른 jsp 에 포함되도록 만들어졌다
 	: 반복 사용되는 것을 jspf 로 뽑아서 jsp 파일에서 include 한다

	: 이렇게 확장자를 설정했을때의 이점
		: 개발자 입장에서도 이해하기 쉽고 이클립스 자체적으로도 조각난 파일이라고 

--------------------------------
https://doublesprogramming.tistory.com/63

https://javacan.tistory.com/entry/88

https://m.blog.naver.com/kimkwon429/220765215503

https://velog.io/@bflykky/jspparam-%ED%83%9C%EA%B7%B8%EB%A5%BC-%ED%86%B5%ED%95%9C-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%A0%84%EC%86%A1-%EC%8B%9C-%EC%9D%B8%EC%BD%94%EB%94%A9%EB%94%94%EC%BD%94%EB%94%A9-%EB%AC%B8%EC%A0%9C
