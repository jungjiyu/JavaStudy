create table YayTest(
    nameXX NVARCHAR2(100) PRIMARY KEY,
    ageXX NUMBER(3),
    emailXX NVARCHAR2(50)
    );



select * from yayTest

UPDATE 테이블명 SET  컬럼1 = 변경할 값, 컬럼2 = 변경할 값 WHERE 조건;
insert into YayTest values ('김김김', 17 , 'naver@naver.com' );
delete from YayTest where ageXX <=20;

레코드 == 한 줄
--------------------------------------------------------------------------------------------------------------
 Connection 클래스의 객체 >> DB 와 연결성을 가지게 해주는 객체
PreparedStatement 객체 >> 생성당시 arg 로 투입된 sql 쿼리문을 저장하고 있으며, 이를 실행 가능한 객체
 ResultSet >> PreparedStatement 의 쿼리문 실행 결과를 담은 객체


단계 : 
		0. DBMS 의 "드라이버"가 있는 파일을 애플리케이션에 투입해서 로드할 수 있게 준비해두기 ( ojdbc.jar )
		1. JDBC 드라이버를 "로드"
			: Class.forName("드라이버");


		2. DriverManager 를 통하여 connection 객체 생성
			: Connection conn = DriverManager.getConnection(url , dbID,dbPW );

		3. connection 객체를 통하여 Statement 객체를 생성(정확히는  PreparedStatement 객체이긴 함)
			: PreparedStatement pstmt = conn.prepareStatement(쿼리문);
			
		4. PreparedStatement 객체를 통하여 sql 쿼리문을 실행한 결과를 ResultSet 객체로 받음
			: ResultSet rs = pstmt.executeQuery() 혹은 pstmt.excuteUpdate( ) 


		5. ResultSet 객체에서 결과를 꺼내서 활용하기	
			: while(rs.next()){
	
				String id = rs.getString("ID"); 
				String pw = rs.getString("PW"); 
				String name = rs.getString("NAME"); 
			}

			

		6. 연결 해제
			: 가장 최근에 사용했던 것부터 거꾸로 올라가면서 "finally 문 내부에서" 해제한다
				: 이를 위해선 try 문에서 rs, pstmt, conn 을 선언하는게 아니라 try 문 밖에서 미리 해둬야 finally 문에서도 접근이 가능
			try{
				if (rs != null) rs.close();
		 		if (pstmt != null) pstmt.close();
		 		if (conn != null) conn.close();
			}catch(Exception e){}
				

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

자바빈 >> jsp 에서 java 기반의 클래스 객체를 쉽게 사용하기 위함
	<jsp:useBean id="bean1" class="bean.BeanEx" scope="page"/>
	<jsp:setProperty name="bean1" property="age" value="25"/>
	<p><jsp:getProperty name="bean1" property="age"/></p>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------



int excuteUpdate( ) 메소드
	: DML(Data Manipulation Language 데이터 조작어)인 INSERT와 UPDATE, DELETE 문인 경우에는 관련된(추가, 변경, 삭제) 레코드의 수를 반환한다.
		: insert 는 어차피 1 만 반환하고, update 와 delete 는 때에 따라 다르다


PreparedStatement 객체
	: SQL문에서 변수(데이터)가 들어갈 자리는 ' ? ' 로 표시한 후 setter 메소드를 사용하여 ? 로 표시한 곳에 데이터를 넣어준다.

	: 굳이 Statement 냅두고 PreparedStatement 쓰는 이유 >> 쿼리문에 일단 ? 써놓고 Setter 계열의 메서드인 setString( ) 을 활용하여 ? 에 바로 값 대입할 수 있어서
		: setString(인덱스, 값); 
			: 주의 ) 인덱스는 1부터 시작한다
			: 해당 인덱스에 해당하는 물음표에 해당 값을 넣는다

		: 예시
			: String query= "INSERT INTO KGMEMBER VALUES (?,?,?,?,?) ";
			:	 
pstmt.setString(1,id);		
pstmt.setString(2,pw);		
pstmt.setString(3,name);
pstmt.setString(4,email);
pstmt.setString(5,address);
				


DAO TAO >> 둘다 java 기반의 클래스로 만들어서 사용한다	
	: db와 관련한 경우 java 기반의 코드가 많고, 화면 과의 교류가 적어 html 기반 보다는 java 기반이 더 좋다

DAO
	: Data Access Object
	: 데이터베이스의 data 에 접근하기 위한 객체
		: form 으로 입력된 내용을 자바빈을 통하여 받아서 저장한다

DTO
	: Data Transfer Object
	: 계층간 데이터 교환을 위한 자바빈즈
		:
	


		

// 싱글톤패턴구현
	private static memberDAO instance = new memberDAO(); // private static  +자기자신 타입의 레퍼런스 변수 선언후 넣어둠
	private memberDAO() {
	}
    public static memberDAO getInstance() {// 반환할 수 있는 객체
        return instance;
    }

		: DTO >> 자바빈 규약 지켜 생성
			: 각 column 의 타입을 짘켜 변수 생성
			: Timestamp 타입 같은 경우 java.sql.Timestamp 따로 import 필요
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


<style>
	{
		text-align:center;
		margin: 0 auto;
	}

</style>



 자바 스크립트로 함수 만들기 ;
		<script type="text/javascript">
			function joinFormCheck(){
				var id = document.joinForm.id.value; 
				}
		</script>

	;  함수 >> function 이란 키워드로 시작
	:  변수의 타입 >> var
	: document 객체 << 현제 웹페이지를 나타내는 객체
		: documemt.웹페이지서사용하고자하는값의NAME값.values
			: document 를 대상으로 html 태그의 name 값을 사용하여 그 태그로 접근하고 그 태그의 values 속성을 사용한다.
		: var id = document.joinForm.id.value; 의 경우 현재 문서의

 자바 스크립트로 함수 만든 함수를 html 코드 상에서 호출하기  << onclick 이벤트 속성에 할당한다
	<input type="button" onclick="joinFormCheck()" value="회원가임"> 

자바스크립트에선에선 이름으로 접근한다

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------


SELECT ID,PW from KGMEMBER; 도 가능하다
