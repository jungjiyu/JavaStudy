자바 빈
	: jsp ㅔ서 여러 데이터 작업을 효율적 사용위함
	: 필드와 메서드를 가진 클래스. java 언어 기반 == 빈ㄴ
	: 빈을 만든다는 것은 데이터 객체를 만들기 위해 클래스를 만드는 것이다.
데이터 객체에는 데이터가 있어 그에 해당하는 (getter / setter) 메소드가 있다.


: 사용법
1. 속성과 기능이 있는 빈 클래스(데이터 클래스)를 Java Resources 에 만든다 
	: jsp , servlet 같은 것처럼 eclips 에서 따로 자바빈 전용 템플릿을 제공하진 않아 따로 다 만들어야됨
	// 자바빈 규약
		// 1. 빈이 패키지화 되있어야한다 << default package 가 아닌. 직접 만든 패키지
		// 2. 기본 생성자를 반드시 가지고 ㅇ있어야한다 << getter setter 로 필드값을 할당할 목적으로 만들어졌으므로, 기본ㄴ 생성자를 가지고 있어야함
		// 3. 멤버 ㄴ변수의 접근자는 private 으로 선언한다
		// 4. 멤버 변수에 접근하기 위한 publid 접근자인 getter , setter 메서드를 만들어 놓아야한다
			// 이클립스 기능을 사용하여 getter setter 만들기
			//alt+shift+s 하고 generate getters and setters 하고 select all
	

2. jsp 페이지를 만들어서 액션태그를 이용하여 데이터 클래스를 사용한다.(빈의 내부 데이터를 처리한다.)
	: webapp 내부에 jsp 파일 만든다
	


빈 관련 액션태그
	: 
	: 지시자명 >> useBean : 특정 Bean 클래스의 객체를 생성할 때 사용한다
		형식 : <jsp:useBean id="원하는객체명" class = "쓰고자하는Bean클래스의풀클래스명" scope="유효벙위4가지중하나" /> 
		ex ) <jsp:useBean id="student" class = "com.jsp.student.Student" scope="page" /> 

		: 속성
			1. id  << 자바 객체 이름 명시
			2. class << 
			3. scope << 유효 범위 지정
				(1) page << 생성된 페이지에서만 사용이 가능
					: 디폴트값
				(1) requset << request 요청을 받고 처리를 완료할 때까지 유지됨.
				(1) session << 클라이언트당 하나씩
				(1) application << 서버 종료 전까진 유지

	:  지시자명 >> setProperty : 데이터 값을 설정 할 때 사용한다. << 객체의 초기 값 설정 할때 자주 사용
		형식:  <jsp:setProperty name="자바빈객체명" property = "클래스내부의필드명" value="집어넣고자하는값" /> 
		ex) <jsp:setProperty name="student" property = "studentID" value="202401" /> 

		: 속성 
			1. name
				: 빈 이름 . id
			2. property 
				: 필드명
			3. value
				: 값

	:  지시자명 >> getProperty : 데이터 값을 설정 할 때 사용한다.
		형식 : <jsp:getProperty name="자바빈객체명" property = "필드명" /> 
		ex) <jsp:getProperty name="member" property = "id" /> 

		: 속성
			1. name
				: 빈 이름 . id
			2. property 
				: 필드명
		: 이거 자체로 값이 나오는거다


	: setProperty , getProperty 액션 태그 << 속성에 바로 접근해서 값을 넣고 빼는게 아니라(private 이라서 애초에 직접 접근 불가) getter , setter 메서드 (publlic 이라 가능)로 얻어온 것이다.


-------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE KGMEMBER (
ID VARCHAR2(50) PRIMARY KEY,
PW VARCHAR2(50) NOT NULL,
NAME NVARCHAR2(50) NOT NULL,
EMAIL VARCHAR2(100),
ADDRESS NVARCHAR2(100),
REGDATE TIMESTAMP DEFAULT SYSTIMESTAMP
    );
    
    INSERT INTO KGMEMBER(ID, PW, NAME, EMAIL, ADDRESS) VALUES('hong','1234','홍길동','hong@naver.com','서울');
    INSERT INTO KGMEMBER(ID, PW, NAME, EMAIL, ADDRESS) VALUES('sung','1111','성춘향','sung@naver.com','대전');
    INSERT INTO KGMEMBER(ID, PW, NAME, EMAIL, ADDRESS) VALUES('eeee','2222','이몽룡','eeee@naver.com','전라도');


commit;   


JDBC
	: Java DataBase Connectivity
	: 데이터베이스에 연결해서 CRUD create read update delete  를 효율적으로 할 수 있는 메서드 제공
	: 자바는 DBMS( Oracle, MySQL , MongoDB 등) 의 종류에 상관없이 하나의 JDBC API 를 이용해서 데이터 베이스 작업을 처리한다
	: 과정
		1. sqldeveloper 를 연다
			jdbc-lib-ojdbc11.jar 파일 복사
				: 여기에 오라클 드라이버 있다

		2. dynamic project - webapp -webinf-lib 아래에 복붙
			: 라이브러리 올려주기 가능
			

		3.. webapp 내부에 jsp 파일 만든다

	: jdbc 연결 순서 외우자 (7페이지)
		(1) JDBC 드라이버 로딩<< 메모리에 올림
		(2) 데이터 베이스 연결  << 연결성 가지는 connection 객체를 얻음
		(3) Statment 생성 << sql 문을 처리하는 객체를 생성
		(4) SQL 문 전송 
		(5) 결과 받기 (ResultSet)
		(6) 연결해제 << close()

	: jsp 
		
	: statemetnt 객체<< <interface> Statement
		: executeQuery()  >> SQL 문 실행 후 여러 개의 결과값이 생기는 경우 사용EX) SELECT
			excuteQuery( )  >> 데이터베이스 검색 전용 메서드인 SELECT 문을 실행 시킬 때 사용하며 결과값을 ResultSet 타입으로 반환한다

		: executeUpdate() >> SQL 문 실행 후 테이블의 내용만 변경되는 경우 사용 EX) UPDATE, DELETE







SELECT 문을 수행하고 반환된 값(=REsultsset 객체)을 레코드 셋이라고 부르며 레코드 셋은 여러행으로 구성되어 있다.
여러 행을 한꺼번에 처리할 수는 없고 한 개의 행 단위로 처리할 수 있다.
	: 레코드 == 한 줄

	: ResultSet의 메서드 
		: next() >> 현재 행에서 한행 다음으로이동
			: 다음 행이 있으면 true 를 반환하고 커서를 이동시킴
			: 다음 행이 없으면 false 를 반환

		: getter 꼴 메소드 (getString, getInt 등) >> 각 행에서 원하는 컬럼 값을 접근해서 얻으려면 getter 메소드를 사용 (컬럼 이름으로 값을 얻을 수 있다.)




-------------------------------------------------------------------------------------------------------------------------------
<어쩌구> </어쩌구> ==  <어쩌구/>

