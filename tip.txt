1. jsp html 뭐 그런거에서의 prameter는 주로 다른 페이지로 이동과 동시에 전달되는 데이터를 가리키는 용어로 사용한다  (자바나 c언어서 처럼 매서드 선언부에서 선언된 변수들을 가리키기보다는... 얘네들은 걍 argument 라고 부르자) 


2. html . jsp 이런데에서는 주로 값을 " 를 사용해 입력하고 java script 같은 경우엔 주로 ' 를 사용하여 입력한다

3. context >> 
  : 애플리케이션의 맥락과 흐름을 관리하는 것과 관련된 것
  : 걍 단어로 해석하면 맥락이란 뜻인데, 이는 프로그래밍 내에서도 비슷한ㄴ 의미를 가지는것
    : context 어쩌구 예시
      1. ServletContext
        : 서블릿 컨텍스트. 그러니까 서블릿 애플리케이션의 전체적인 흐름으 관리
            : 그러니까 프로그램의 전반적인 환경관리, 상호 작용 등을 돕는 역할을 하는 객체
              - 서로 다른 서블릿 간의 공유 데이터 관리
              - 프로그램의 설정 정보 관리
              - 세션 관리
                - ... 

4. contextpath	: 서블릿컨테이너 즉 Tomcat 에서 ㅇ웹 상의 어플리케이션(=프로젝트)을 구분하기 위해 사용하는 Path.
		: 그러니까 프로젝트가 여러개고 톰캣은 하나니까 실행할때 프로젝트를 구분하기 위해 Path 를 설정하는거
		: 그러니까 결국 프로젝트 명을 의미한다
	: URL의 일부이다 << 포트번호 다음 한토막이다
		:  http://localhost:8282/Day2/Hello 에서 Day2

	: URL == 도메인:포트번호/contextpath/url매핑
  : URI == URL 에서 도메인 이런거 뺴고 contextpath 이후 부분부터의 경로

5. 경로 비교
	1.  URL
	  System.out.println("URL : " + request.getRequestURL());	---->  /http://localhost/JSP/member/list.do :  전체주소
	
	2. URI
	  System.out.println("URI : " + request.getRequestURI());	  ----> /JSP/member/list.do  :  프로젝트에서부터 현재 페이지를 부른 servlet주소까지
	
	3. ContextPath
	  System.out.println("contextPath : " + request.getContextPath());	---->  /JSP  :   프로젝트명
	
	4. ServletPath
	  System.out.println("servletPath : " + request.getServletPath());	 ----> /member/list.do  : servlet 주소
	
	


6. 인코딩 관련 정리

	(1)Servlat에서는 doPost 메서드 내부서 아래의 세 줄을 기본적으로 적어주는 편
	  request.setCharacterEncoding("UTF-8"); 
	  response.setCharacterEncoding("UTF-8"); 
	  response.setContentType("text/html; charset=UTF-8"); 
	
	  : 일단  `response.setCharacterEncoding("UTF-8")` 는 클라이언트로 부터 받은 request의  문자 인코딩을 설정합니다. 이것이 없으면 기본적으로 ISO-8859-1이 사용되니까 얘는 필수다
	  : response 객체 관련 세팅 에서는  response.setContentType("text/html; charset=UTF-8");  만 해도 문제가 없긴 하지만  response.setCharacterEncoding("UTF-8");  까지 해주는 게 좋다
	      : response.setContentType("text/html; charset=UTF-8")  >> 클라이언트에게 전달되는 응답의 콘텐츠 타입(콘텐츠의 유형과 문자 인코딩)을 설정
	      : `response.setCharacterEncoding("UTF-8")`>>   문자 인코딩을 명시적으로 설정함으로써 코드의 가독성을 높이고, 서블릿의 다른 부분에서도 이를 참조하여 사용할 수 있음.


	(2)JSP 에서는 파일 생성시 코드 윗 부분에 아래와 같은 지시자가 기본적으로 생성됨
	  <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 
	
	  : 이때 contentType 는 Servlet의  response.setContentType 에 대응하는 거고 , pageEncoding 에서는  response.setCharacterEncoding  에 대응하는 거임
	
	  : ***** 지시자 부분 tip << 지시자 부분에서는 주로 response 객체와 관련된 설정을 지정한다(request 객와 관련된 설정을 여기서 하진 않는다) . request 객체에 관련한 설정은 스크립트릿(<% %>)에서 처리한다.
	      : 그래서 답장 받고 전송하는 코드에서 request.setCharacterEncoding("UTF-8"); 은 해주지만 별도로 response.setContentType("어쪼규") 이런건 안해주는 거다.
	

7.  의미
이클립스에서 서버의 플레이 버튼을 누르는 것 == 서버 재시작(껐다 키는거)
웹 브라우져 창 닫는거 == 클라이언트

7. 쿠키, 세션 , 어플리케이션의 비교
	: 공통점 ) 일반적으로는 클라이언트와 서버가 끊어지면(= 서버가 클라이언트에게 response 를 보낸 이후) 남남이 되지만, 이 세가지를 사용하면 연결이 끊어진 이후에도 서버와 클라이언트간의 관계를 유지할 수 있다

	: 차이점 ) 관계데이터가 저장되는 위치 && 삭제되는 상황
	: 쿠키
		: 저장위치 >> 클라이언트에게 저장된다
		: 삭제 되는 상황 
			(1) 쿠키의 유효 시간이 지남
				1. 원래 속성으로 설정했던 시간이 경과했음
				2. 서버가 쿠키에 접근하여 유효시간을 0 으로 수정함

			(3) 클라이언트가 직접 삭제함

		: (헷갈리지만) 삭제 안되는 상황
			: 해당 브라우져를 아예 닫음 (탭을 닫는게 아니라 아에 큰 X자 눌러서)
			: 서버를 재시작 << 쿠키는 클라이언트에 저장되있는거라 상관 없음

	: 세션
		: 저장 위치 >> 서버에 저장된다
		: 저장 기준 >> JsessionID 그러니까 세션 쿠키
			: 
		: 삭제되는 상황
			(1) 해당 탭만 닫기

	: 어플리케이션
		: 서버에 저장이된다
		: 서버가 종료되지 않는 한 그 내용은 저장된다
