1. jsp html 뭐 그런거에서의 prameter는 주로 다른 페이지로 이동과 동시에 전달되는 데이터를 가리키는 용어로 사용한다  (자바나 c언어서 처럼 매서드 선언부에서 선언된 변수들을 가리키기보다는... 얘네들은 걍 argument 라고 부르자) 


2. html . jsp 이런데에서는 주로 값을 " 를 사용해 입력하고 java script 같은 경우엔 주로 ' 를 사용하여 입력한다

3. context >> 
  : 애플리케이션의 맥락과 흐름을 관리하는 것과 관련된 것
  : 걍 단어로 해석하면 맥락이란 뜻인데, 이는 프로그래밍 내에서도 비슷한ㄴ 의미를 가지는것
    : context 어쩌구 예시
      1. ServletContext
        : 서블릿 컨텍스트. 그러니까 서블릿 애플리케이션의 전체적인 흐름으 관리
            : 그러니까 프로그램의 전반적인 환경관리, 상호 작용 등을 돕는 역할을 하는 객체
              - 서로 다른 서블릿 간의 공유 데이터 관리
              - 프로그램의 설정 정보 관리
              - 세션 관리
                - ... 

4. contextpath	: 서블릿컨테이너 즉 Tomcat 에서 ㅇ웹 상의 어플리케이션(=프로젝트)을 구분하기 위해 사용하는 Path.
		: 그러니까 프로젝트가 여러개고 톰캣은 하나니까 실행할때 프로젝트를 구분하기 위해 Path 를 설정하는거
		: 그러니까 결국 프로젝트 명을 의미한다
	: URL의 일부이다 << 포트번호 다음 한토막이다
		:  http://localhost:8282/Day2/Hello 에서 Day2

	: URL == 도메인:포트번호/contextpath/url매핑
  : URI == URL 에서 도메인 이런거 뺴고 contextpath 이후 부분부터의 경로

5. 경로 비교
	1.  URL
	  System.out.println("URL : " + request.getRequestURL());	---->  /http://localhost/JSP/member/list.do :  전체주소
	
	2. URI
	  System.out.println("URI : " + request.getRequestURI());	  ----> /JSP/member/list.do  :  프로젝트에서부터 현재 페이지를 부른 servlet주소까지
	
	3. ContextPath
	  System.out.println("contextPath : " + request.getContextPath());	---->  /JSP  :   프로젝트명
	
	4. ServletPath
	  System.out.println("servletPath : " + request.getServletPath());	 ----> /member/list.do  : servlet 주소
	
	


6. 인코딩 관련 정리

	(1)Servlat에서는 doPost 메서드 내부서 아래의 세 줄을 기본적으로 적어주는 편
	  request.setCharacterEncoding("UTF-8"); 
	  response.setCharacterEncoding("UTF-8"); 
	  response.setContentType("text/html; charset=UTF-8"); 
	
	  : 일단  `response.setCharacterEncoding("UTF-8")` 는 클라이언트로 부터 받은 request의  문자 인코딩을 설정합니다. 이것이 없으면 기본적으로 ISO-8859-1이 사용되니까 얘는 필수다
	  : response 객체 관련 세팅 에서는  response.setContentType("text/html; charset=UTF-8");  만 해도 문제가 없긴 하지만  response.setCharacterEncoding("UTF-8");  까지 해주는 게 좋다
	      : response.setContentType("text/html; charset=UTF-8")  >> 클라이언트에게 전달되는 응답의 콘텐츠 타입(콘텐츠의 유형과 문자 인코딩)을 설정
	      : `response.setCharacterEncoding("UTF-8")`>>   문자 인코딩을 명시적으로 설정함으로써 코드의 가독성을 높이고, 서블릿의 다른 부분에서도 이를 참조하여 사용할 수 있음.


	(2)JSP 에서는 파일 생성시 코드 윗 부분에 아래와 같은 지시자가 기본적으로 생성됨
	  <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 
	
	  : 이때 contentType 는 Servlet의  response.setContentType 에 대응하는 거고 , pageEncoding 에서는  response.setCharacterEncoding  에 대응하는 거임
	
	  : ***** 지시자 부분 tip << 지시자 부분에서는 주로 response 객체와 관련된 설정을 지정한다(request 객와 관련된 설정을 여기서 하진 않는다) . request 객체에 관련한 설정은 스크립트릿(<% %>)에서 처리한다.
	      : 그래서 답장 받고 전송하는 코드에서 request.setCharacterEncoding("UTF-8"); 은 해주지만 별도로 response.setContentType("어쪼규") 이런건 안해주는 거다.
	

7.  의미
이클립스에서 서버의 플레이 버튼을 누르는 것 == 서버 재시작(껐다 키는거)
웹 브라우져 창 닫는거 == 클라이언트

7. 쿠키, 세션 , 어플리케이션의 비교
	: 공통점 ) 일반적으로는 클라이언트와 서버가 끊어지면(= 서버가 클라이언트에게 response 를 보낸 이후) 남남이 되지만, 이 세가지를 사용하면 연결이 끊어진 이후에도 서버와 클라이언트간의 관계를 유지할 수 있다

	: 차이점 ) 관계데이터가 저장되는 위치 && 삭제되는 상황
	: 쿠키
		: 저장위치 >> 클라이언트에게 저장된다
		: 삭제 되는 상황 
			(1) 쿠키의 유효 시간이 지남
				1. 원래 속성으로 설정했던 시간이 경과했음
				2. 서버가 쿠키에 접근하여 유효시간을 0 으로 수정함

			(3) 클라이언트가 직접 삭제함

		: (헷갈리지만) 삭제 안되는 상황
			: 해당 브라우져를 아예 닫음 (탭을 닫는게 아니라 아에 큰 X자 눌러서)
			: 서버를 재시작 << 쿠키는 클라이언트에 저장되있는거라 상관 없음

	: 세션
		: 저장 위치 >> 서버에 저장된다
		: 저장 기준 >> JsessionID 그러니까 세션 쿠키
			: 
		: 삭제되는 상황
			(1) 해당 탭만 닫기

	: 어플리케이션
		: 서버에 저장이된다
		: 서버가 종료되지 않는 한 그 내용은 저장된다


10. f12 >> 개발자모드
	: application - cookie >> 생성된 쿠키 확인 및 삭제 가능
	: network - HTTP 메세지 확인 가능


11.
	: 추상 클래스라고 죄다 상속 전용인건 아니다. 그냥 new 연산자를 이용한 객체 생성을 막고 메서드( getInstance( ) )를 이용한 객체 생성을 위해 그렇게 만든걸 수 있다. << arg 에 따라서 자동적으로 다른 자식 클래스의 객체를 생성하게 한다
		: ex >> Calendar 추상클래스의 객체를 생성하기 위해서 Calendar 클래스의 자식 클래스를 직접 만들고 그걸로 객체 생성하는게 아니라 바로 Calendar.getInstance() 로 만든다.
			: Calendar의 getInstance는 "자식" 클래스 타입을 반환합니다.
			그 자식 클래스의 타 c입을 외부에 노출하지 않는 것은, 각 환경의 jdk마다 서로 다른 클래스를 사용하기 때문이죠.
			날짜는 위치나 로케일. 시간대 상황 등에 따라 다 달라지니까요...


12. 각 웹프로젝트 별로 있는 WEB-INF/web.xml 과 Servers 디렉터리에 있는 web.xml 의 차이
	: WEB-INF/web.xml  >> 각 프로젝트마다 독립적으로 존재하고, 각 "프로젝트"에 대한 "개별" 설정을 담당한다
	: Servers 파일의 web.xml >> "서버"의 전체적인 설정을 담당하여, "모든" 프로젝트에 적용되는 설정을 관리한다.
	: 종류가 뭐가 됬건 web.xml 을 쓰는 이유 >> 유지 보수성을 높이기 위해. 
		: 각 파일마다 똑같은거 여러번 쓰고 여러번 수정할 필요가 없으니까


13. jsp 에서 out.println( );  안먹힌다. <br>을 써줘야된다.

14. 스크립트 언어>> 말 그대로 대본. 즉시 실행할 수 있는 언어
	: java script , pyton, php 등
	: 주의해야되는건 html 은 스크립트언어가 아닌 것 같다 (걍 마크업 언어)
	: 인터프리터르 사용하기 때문에 
		: (컴파일러처럼) 기계어로 변환하는 과정을 필요로 하지 않음.
		: 한줄씩 실행시ㅣ기 때문에 실행속도가 느림

15. 인터페이스 >> 상호 작용을 쉽게 할 수 있게 해주는 접점, 시스템

16. 프로세스, 스레드
	: 단위이다
	: 프로세스 process ) os 로부터 자원을 할당받은 "작업"의 단위			: 즉, 실행중인 프로그램
			: 모든 프로그램은 운영체제로부터 자원을 할당받아야 실행될 수 있따
				: 할당받는 자원의 구조
					(1) 코드영역 code >> 프로그래머가 작성한 프록르ㅐㅁ 함수들의 코드가 CPU 가 해석 가능한 기계어 형태로 작성되어있다
						: 정적영역이다
					(2) 데이터 영역 Data >> 코드가 실행되면서 사용되는 전역변수와 같은 지속적인 자료들(static 변수 , 상수 ..)이 모여있다
						: 정적 영역이다
					(3) 스택 영역 Stack >> 지역변수와 같은 함수에 의해 생기는 동적인 자료들을 보관 가능한 공간
						: 함수의 호출과 동시에 메모리가 할당되고, 함수가 종료되면 소멸한다.
					(4) 힙 영역 Heap >> 생성자 , 인스턴스와 같은 사용자에 의해 동적으로 할당되는 데이터를 위한 공간.
						: 스택 영역은 자동적으로 함수의 종료와 함께 없어질 얘들이 모여있던 곳이었다면, 여기는 사용자에 의해 사용자가 지정한 지점에서 없어지거나 지속적으로 있을 얘들을 위한 공간이다.


			: 참고로 "프로그램" 자체는 정적인, 아직 실행되지 않은 파일을 의미한다

	: 스레드 Thread ) 프로세스가 할당받은 자원을 이용하는 "실행 흐름"의 단위

(1)프로세스 >>  프로그램
		: 멀티 프로세스 >> 한 프로세스를 여러 프로세스로 구성하여 각 프로세스 별로 태스크(작업)을 처리하도록 함

	(2) 스레드 >> 한 프로세스 내에서 실행되는 클래스 같은거
17. 멀티 프로세스 , 멀티 스레드 
	: 한 어플리케이션에 대한 처리 방식
	
		: 멀티 스레드 >> 한 프로세스를 여러 스레드로 구성하여 각 스레드 별로 태스크를 처리하도록 함
		: 멀티 프로세스 보다 훨 자주 씀

18. servlet --> jsp
	: 동적처리의 역사 ) CGI --> servlet --> jsp
	: 최근 경향 ) jsp 와 servlet 을 섞어 쓴다
	: CGI )
		: 사용자의 요청을 받고, 웹 서버에서 다른 프로그램을 불러내고, 그 처리 결과를 클라이언트에게 보내주는 인터페이스
		: 단점 ) 멀티 프로세스 방식이여서 서버 부하가 큼
			: 대인 >> 멀티 스레드 기반의 Servlet 등장

	: servlet ) 
		: java 언어 기반이고, java 코드 내부에 html 태그를 삽입하는 구조
		: server + let 
		: 단점 << 그렇다고 사용안하는거임. 개똥도 쓸데가 있다
			: java 언어 기반이라 html 삽입하기 번거로움
			: 코드가 수정되면 다시 일일이 컴파일하고 배포해야됨

		: 클라이언트의 request을 받고, 분석하여 처리하고, 처리한 결과를 클라이언트에게 response하는 Controller 층을 담당
		: 동작과정
			1. 

	: jsp ) 
		: html 코드 기반이고, 자바 코드가 삽입되는 구조
		: Java Server Page
		: 장점
			: html 언어 바로 사용 가능하고, 다양한 태그를 활용하여 자바 코드도 쉽게 삽입 가능
			: 코드를 수정하면 알아서 컴파일해줄껄?
		:  

		:사용자에게 결과를 보여주는 View 층을 담당 
			: html 코드 사용이 편리해서 그렇다


	: 
		
			
