1. 인터페이스에는 다음을 선언 가능
  : 필드 >> 상수 필드 only (static final)
  : 메서드 << abstract , default , static 중 3가지 중 하나만 사용 가능(동시에 불가)
    (1) abstract >> 메서드의 선언부만 선언, 정의는 구현 클래스에서 해야함
        : 구현클래스에서 필수적으로 오버라이딩해줘야됨

    (2) default >> 메서드를 인터페이스 내부서 선언,정의함
        :구현 클래스에서 오버라이딩 해도되고 안해도 됨
        :구현 클래스의 객체를 대상으로 쓰임

    (3) static >> 메서드를 인터페이스 내부서 선언, 정의함
        : 인터페이스명을 대상으로 사용 가능
        : 인터페이스의 구현 클래스를 대상으로 static 한게 아니고, 인터페이스를 대상으로 static 한거임 주의
            : 구현 클래스명을 대상으로 사용 불가
            : 구현 클래스에서 오버라이딩 불가

  : 왜 굳이 static, default 타입의 메서드를 쓰나
      : static >> 인터페이스를 대상으로 사용하고 싶은 메서드가 있을때
      : default >> 구현 클래스에서 오버라이딩할 강제성을 부여하지 않기 위해

2. 클래스 내부서 클래스 자기 자신의 객체를 저장하는 레퍼런스 필드의 경우 반드시 static 으로 선언해줘야한다
  : 안그럼 끊임없이 자기자신을 호출하여 stack overflow 에 빠진다.


3. synthatic sugar >> 문법적 설탕. 그러니까 간단한 표현으로 본래의 의미를 대신할 수 있게 한것.
  ex) *a.b == a -> b
