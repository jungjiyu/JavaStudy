1. 생각보다 삼항연산자 많이 쓴다
	public int doOperation(int fiNum, int seNum) {
		return seNum!=0 ? fiNum/seNum:0;
	}

2. 인터페이스 구현시키게 하면 좋은 경우 
	: 다형성 구현하고 싶을때. 그러니까 변수 하나로 여러개의 객체 받을 수 있게 하고, 별도의 형변환 없이 메서드를 바로 실행시킬 수 있게 하고 싶을때
	(1) 동일한 카테고리의 기능별 클래스들이 각각 상속하게 함
		: ex p.64 ) 연산카테고리의 substract , add ,  multiple, divide  클래스 각각이 calculable 인터페이스 상속하게함. 나중에 calculable 타입의 parameter 하나로 4가지의 객체 중 암거나 다 받을 수 있음.



3. 태그에서 name 속성은 실제로 존재하는 대상의 이름을 할당하는거고, id 속성은 원하는 대로 새로 이름 짓는거임


4. 싱글톤 패턴의 주의점
	: stateless 하게 설계해야한다
		: 모든 클라이언트가 한 객체를 공유하게 되므로.
		: 그러니까 가급적 읽기만 가능하게 해야한다 
			: 특정 클라이언트가 필드 값을 변경할 수 있음 안된다

5. 어노테이션의 경우 속성을 어노테이션명 바로 옆에 괄호치고 작성한다. 그리고 태그와는 다르게 딱히 값에 "" 를 붙이진 않는다
	: ex) @Autowired(required=false)


6. 3장의 2절 부분(xml 파일 태그) 정리 나중에 하기
