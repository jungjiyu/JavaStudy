: 웹 브라우져는 일반적으로 response 이후 관계를 끝낸다
	: 서버와의 연결이 끊긴 이후에도 어떤 정보를 지속적으로 유지하기 위한 수단이 쿠키 혹은 세션이다


쿠키
	: 서버와 클라이언트의 관계 유지 위해 씀	
	: 쿠키의 기본 사이클
		1. 쿠키는 서버에서 생성한다. 
			: 쿠키는 내장 객체가 아니라 직접 생성해줘야된다.
				Cookie cookie = new Cookie("쿠키이름","값");
					: arg로 쿠키이름과 쿠키 이름에 매핑될 값을 적는다

		2. 서버가 클라이언트(=웹브라우져)에게 쿠키를 전송하고, 클라이언트는 쿠키를 받아 쿠키를 파일의 형태로 쿠키 저장소에 보관한다.
			: 클라이언트(웹 브라우져)의 모든 웹 페이지마다 보관되는게(=유효한게) 아니라 Path 속성으로 설정한 범위에서만  유효한거다
			: 쿠키 객체를 단순히 서버에서 생성한다고 해서 클라이언트에게 보내지는게 아니라 따로 response 객체의 addCookie( ) 메서드를 사용하여 탑재해야한다. 
			: 웹 브라우져 차원에서 아예 쿠키를 차단이 가능하고, 삭제도 가능하다
			: 로그인 같은건 쿠키로 사용하지 않음. 웹 브라우져에 저장되는거라 너무 위험하기 때문. 현재는 세션 객체를 쓴다.
				: 그럼 쿠키는 언제 사용될까? >> 팝업창 같은거 아래에서 24시간 보지 않기 이런거

		3. 이후 클라이언트가 해당 웹 서버에 다시 request를 보낼때 쿠키도 함께 전송한다.
		4. 서버는 클라이언트에게 받은 쿠키를 활용하여 작업한다
			: 쿠키들 중 특정 이름의 쿠키 객체만 딱 얻을 수는 없고, request 객체의 getCookies( )를 활용하여 Cookie[ ] 배열의 형태로 모든 쿠키 객체를 얻고 조건문으로 특정 쿠키 객체를 판별하여 활용한다


	: 쿠키의 수정
		: 특정 쿠키 객체를 대상으로 setValue( ) 를 이용하여 쿠키의 값을 수정하고, 이를 클라이언트에 보내면,  자동적으로 그 값으로 기존 쿠키 객체가 수정된다.

	: 쿠키의 삭제
		: 쿠키의 유효시간을 0 으로 수정하고 클라이언트에게 보낸다.
			: 다른 사이트의 쿠키까지 모두 삭제하면 안되니까 반드시 조건문으로 걸러내서 타겟 쿠키 객체에만 적용해야된다.

Cookie[] cookies= request.getCookies();
for(int i = 0 ; i <cookies.length;i++){
	String str = cookies[i].getName();
	if(str.equals("cookieName")){
		cookies[i].setMaxAge(0);//유효시간을 0으로 설정
		response.addCookie(cookies[i]);//변경된 쿠키 객체를 웹 브라우져에 저장
	}
}
	
	: 쿠키 객체의 속성
		1. age : "클라이언트"에서 쿠키가 유효한 시간을 설정한다
		2. path : "서버"의 특정 URL 에 대해서  쿠키를 전송하게 한다<< 그러니까 클라이언트가 해당 디렉터리로 request 를 날릴때만 쿠키가 전송되게 지정한다
			: 참고 << https://dololak.tistory.com/546
			: 가능한 범위
				(1)  아예 setPath를 사용하지 않은 경우 >> 쿠키를 생성했던 그 디렉터리 내부에서만 가능 !! (하위도 안됨)
				(2) "/"  >> 해당 어플리케이션의 모든 URL 범위
				(3)  "디렉터리" >> 해당 디렉터리자체와 해당 디렉터리의 하위 디렉터리들
		
	: 쿠키 관련 메서드
		: tip 
			>> 쿠키의 속성 설정 관련 메서드: 쿠키 객체를 대상으로 사용하고, 대상 쿠키객체에 바로 그 내용을 반영한다(그 속성을 바탕으로 하는 새로운 쿠키 객체를 만드는게 아니라서 쿠키 객체로 반환값을 받는게 아니다)
			>> 쿠키 반환 메서드 : 클라이언트에게 반환하는 것이니 response 객체를 대상으로 사용한다
			>> 쿠키 습득 메서드 : 클라이언트에게서 가져오는 것이니 request 객체를 대상으로 사용한다.

		: 종류
		(1) void setMaxAge(int sec)
			: 초 단위로 유효시간 설정
			: 쿠키는 보통 유효시간을 정해주지 않으면 웹 브라우져를 닫음과 동시에 쿠키가 삭제된다
				: 이 쿠키를 세션쿠키라고 한다
			: 그러나 유효시간을 설정해놓으면 유효시간동안 쿠키가 존재하게되고 웹 브라우져를 닫아도 유효시간이 남아있으면 쿠키는 삭제디지 않고 남아있게 된다
			: ex) cookie.setMaxAge(60*60); // 1시간

		(2)void  setValue("newCookieValue"); 
			: 쿠키값 변경
			: ex)  cookie.setValue("newCookieValue"); 

		(3) void addCookie(cookie); 
			: 쿠키를 클라이언트에게 보낸다
			: response 객체의 메서드임 주의
			: ex)  response.addCookie(cookie)

		(4) Cookie[ ] getCookies();
			: 클라이언트에게 있는 쿠키를 모두 가져옴
			: Cookie 배열
				: 요소가 Cookie 객체일 뿐이지 일반적인 배열과 그 속성이 같아서 
					: 가리키고 있는게 없음 null 을 반환을 한다.
					: length 필드도 사용 가능하다

			: ㅈㄴ 주의해야하는 것은 Cookie 배열의 경우 요소에 접근하기 전에는 반드기 if(배열명 != null) 을 검사하고 접근해야한다. 안그럼 별짓안해도 오류가 발생한다.
			: Cookie 객체의 메서드가 아니라 request 객체의 메서드임을 주의
			: ex )  Cookie[] cookies= request.getCookies();

		(5) String getName( )
			:쿠키객체의 이름 가져옴
			:반환타입문자욜임

		(6) String getValue( )
			: 쿠키에 저장된 값을 가져옴
			: ex) 
		Cookie[] cookies= request.getCookies();
		for(int i=0;i<cookies.length;i++){
			String str = cookies[i].getName();
		
		if(str.equals("cookieName")){
		}
			out.print("쿠키이름:"+cookies[i].getName()+"<br>");
			out.print("쿠키값:"+cookies[i].getValue()+"<br>");

		}

		(7) void setPath( 경로 )
			: 쿠키 객체의 path 속성을 지정한다
				: "서버" 의 디렉터리 단위로 지정이 가능하고, 디렉터리를 지정하면ㄴ 지정한 해당 디렉터리자체 혹은  "하위 경로"에만 쿠키가 전송된다.
					: 해당 디렉터리의 상위 디렉터리에는 영향을 미치지 않는다 


		(8) String getPath()
			: 쿠키 객체의 path 값을 얻는다 

	: 팝업 관련 메서드
		: 이건 자바 스크립트 window 객체를 활용해야된다
			: 자바스크립트 코드는 <script></script> 태그의 내부에 쓰면된다.

		: 종류
			1. var open( 'URL' , 'target' , 'feature')
				: 팝업을 열음. 그러니까 생성.
				: 자바스크립트의 window 객체이다
				: 이 메서드의 반환값을 할당 받은 var 타입의 변수는 주로 "창 객체"라고 부른다. 이 창객체를 대상으로 이후에 close( ) 시킬 수 있다 (물론 걍 window.close( ) 해도 되긴 함)
				: 자바 스크립트 상식
					: var은 자바 스크립트에서 변수를 나타내는 타입이다
					: 자바스크립트에서는 " 이나 ' 이나 같은거지만 주로 ' 를 사용한다

				: args
					: 이건 태그 내부에 쓰는게 아니라 매서드의 내부에 쓰는것이라
					 속성명1="값1" 속성명2="값2" 꼴이 아니라
					 걍 '값1',  '값2', '값3' ... 꼴이다
						: 물론 '값' 의 형태가 '속성명=값' 이면 그렇게 쓰는거다
						: ex) window.open( 'https://www.naver.com/' , 'scrollbar=yes')
				
					
					1. URL >> 팝업 창에 띄울 URL값
						: 쿼리스트링으로 값 넘겨주는데 한글 같은거 들어가묜 아래와 같이 URL 인코딩을 해주고 넣어야된다.
							var uri = 'http://localhost:8080/viewer.html?key1=123123&key2=[1][2]';
							var res1 = encodeURI(uri);
							
					2. target >> 아래 값 중 하나 입력
						(1) _blank << 새창으로 열기
							: 디폴트값이다
						(2) _self << 현제 페이지를 대체
						(3) _paranet << 부모 프레임에서 열림 
						(4) _top << 로드된 프레임셋을 대체
						***(5) 위의 4가지 중 암것도 해당 안되는 문자열 << 창의 이름을 지정 && 새창에서 열림
							: 동일한 이름의 창을 여는 경우 기존 열린 창의 내용이 바뀐다.

					3. feature >> 아래 값 중 하나 입력
						:이거는 태그 내부에 적는것처럼 '속성명=값' 의 꼴로 입력해야되고, 태그 내부에 여러개의 속성을 적을 수 있는 것처럼 여러개의 '속성=값' 을 할당할 수 있는데 이 경우 한 ' ' 내부에 , 로 구분하여 적는거다
							: ex) 'width=500, height=700, scrollbars=yes, resizable=no'
						:사실 아래 속성 이외에도 몇가지 더 있는데 그건 웹 브라우져 별로 안되는 경우가 많아서 별도로 적진 않음
						(1)  scrollbars
							: yes 혹은 no 할당
						(2) menubar
							: yes 혹은 no 할당
						(3) width 
							: 너비지정
						(4) height
							: 높이 지정
						(5) top 
							: 창의 화면 위에서 부터의 팝업위치 지정
						(6) left
							: 창의 화면 왼쪽에서부터의 팝업 위치 지정

			2. close()
				: 팝업 닫음. 그러니까 없앰
				: 사용법
					: window 객체를 대상으로 사용하는 매서드이다. 
						case1  window.close( ) 
						case2  window객체.close( )
		
	: 내 뇌피셜로는 하필 이름이 쿠키인 이유는 잔 부스러기 처럼 남는 흔적이란 의미에서 그런 것 같다.


---------------------------------------------------------------------------------------

실습
	cookieSet >> 쿠키를 만드는 파일
	cookieDelete >> 쿠키를 삭제하는 파일
	cookieGet >> 직접적으로 쓰이진 않고 coolieSet , cookieDelete 에서 남아있는 값 확인하는 용도로 쓰임
	cookieTest> 현재 있는 모든 쿠키를 출력
	Cookie[] cookies = request.getCookies();
	if(cookies!=null){
		for(int i = 0 ; i<cookies.length;i++){
			out.print("쿠키이름:"+cookies[i].getName()+"<br>");
			out.print("쿠키값:"+cookies[i].getValue()+"<br>");
		}
	}
	

---------------------------------------------------------------------------------------
JsessionID
	: 서버에서 자동으로 만들어주는 쿠키
	 
---------------------------------------------------------------------------------------
f12 >> 개발자 모드
	: ㄱ 중 어플리케이션-스토리지-쿠키즈
---------------------------------------------------------------------------------------
localhost에서 리디렉션한 횟수가 너무 많습니다.
== 무한루프

상황 1

1) A 페이지에서 자동으로 B 페이지로 이동

2) B 페이지에서 자동으로 A 페이지로 이동

 

상황 2

1) A 페이지에서 A 페이지를 자동으로 호출

 

이런 식으로 구성된 상황을 말합니다.
---------------------------------------------------------------------------------------

팝업 실습
	: 자바 스크립트 사용
	<script> <%-- 자바스트립트의 object 급. 최상위. --%>
		window.open("popup.jsp",'pop',"width=350, height=550"); <%-- 새창으로 팝업을 만들떄 사용되는 함수 --%>
		// 내부에서 주석 사용 가능능
		// 새 창으로 팝업 만들때사용하는 함수
	</script>
