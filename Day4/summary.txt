JSP Java Server Page
	: 웹 페이지는 미리 서버에 등록해두었다가 웹 브랑우저가 서버에 데이터를 요청하면 이를 웹 브라우저로 전송해서 보여주는데 이를 가능케 하는것들 중 하나가 JSP
	: HTML 내부에 java 코드를 삽입하는 형식으로 서블릿의 단점을 보완하고자 만든 서블릿 기반의 스크립트 기술. 그러니까 서블릿을 작성하지 않고도 간편하게 웹 프로그램밍을 구현하게 만든 기술	
	: 확장자는 .jsp
	: 동작원리<< 결국은 JSP 가 Servlet 대체한거니까 servlet 쓰듯 씀 된다는거다
		: 클라이언트가 JSP에게 요청 >> JSP 컨테이너가 해당 JSP 페이지를 찾고 서블릿 으로 변환시킴 >> 자바 파일을 컴파일 >> 자바 파일의 결과가 다시 사용자의 웹 브라우저로 전송>> 클라이언트가 결과 밥ㄷ음
		: 그러니까 JSP --> Servlet >> Servlet --> class
		
	: JSP 태그의 종류
		: 서블릿과 반대로 HTML 코드에 자바언어를 삽입함
			: 서블릿은 JAVA 언어를 바탕으로 PrintWriter 로 HTML 코드를 작성하는거였다

		1. <%  %>
			: scriptlet 스크립틀릿) JAVA 코드를 삽입한다
				: 네부서 자바 주석 // 같은거 사용 가능하다
				: 한 스크립트릿 내부서 코드를 완전히 쓰지 않고 똥싸다 만것처럼 써도 잘 작동된다. 그냥 하나의 JSP 파일 내서 전체적으로 잘완성되기만 하면 된다. 심지어 중간에 html 쓰면 그것까지 출력된다.
<% 
	for(int i = 0 ; i <10 ; i++){
		if(i%2==0){
			out.print("<h3>"+i+"</h3>"); // out >> jsp 페이지서 결과를 출력할때 사용되는ㄴ 출력 스트림 객체
		}
	}
%> 

<% 
	for(int i = 0 ; i <5 ; i++){
%> 
		<h2>장충동왕족발보쌈</h2>
<%
}

%>

%>

		2. <%! %>
			선언 태그) 전역변수 혹은 메서드 선언
				:<%  % > 내부에서 선언한 변수는 지역변수 개념이 된다
					: 물론 <% % > 단위가 아니라 블럭 단위이다. 
		3. <%= %>
			: 표현식 태그) 결과값을 클라이언트에게 출력
				: <% out.print( 값) %>  의 축약해서 <%=값%> 만하면 해당 내용이 출력되게 해놓은거다
				: ex) <% out.print(10*10); %> == <%= 10*10 %>


		4. <%-- --%>
			: 주석 처리 태그
			: html 주석(<!-- -- >)도 jsp 파일에서 사용 가능하다. 하지만 이왕 jsp 주석을 쓰는걸 추천한다. 웹 브라우저서 페이지 소스보기 하면 html 주석은 보이지만 jsp주석(<%-- --> )은 웹 브라우저의 소스보기 에서도 노출이 안된다. 보안성이 뛰어나다



		5.<%@ %>
			: 지시자 태그) jsp 페이지가 실행될 때 필요한 정보를 jsp 컨테이너에게 알려주는 역할<< 그러니까 jsp 를 servlet 으로 변환하는 시점에 처리된다 
				: 주요 역할
					1. servlet 파일에서의 response 겍체에 대한 설정 역할. (request 객체는 따로 스크립틀릿 내부서 해주는 편이다)
					2. 페이지에 외부 리소스를 불러옴
			: https://abn-abn.tistory.com/81
			: 지시자태그 의 종류 << 지시자태그 카테고리 아래 여러 태그가 존재한다
				1. page태그 : 현재 jsp 페이지의 속성과 response 객체에 대한 기본 설정을 설정한다
				
					속성
						(1) import
							: 근데 보통 import 속성을 직접 타이핑하진 않고 ctrl+shfit+o 로 자동 타이핑 시키는 편이다

						(2) language << 스크립틀릿 안에 어떠한 언어로 작성할 지 명시한다 
						(3) contentType << 클라이언트에게 어떤 형태로 출력할 것인지 설정한다
							:Servelt 에서의 response.setContentType( ) 의 역할
						(4) pageEncoding << JSP 페이지 자체의 인코딩 방식을 지정한다
							: Servlet 에서의 response.setCharacterEncoding( ) 의 역할


				2. include태그 : 별도의 페이지를 현재 페이지에 삽입
					: include 액션태그와 비교됨
					: include 시킨 페이지의 소스코드를 그대로 현재 페이지의 소스코드에 복사시킨다
						: 서로 간의 변수 공유가 가능하다
							: servlet 컴파일 이전에 소스코드 복붙되는거라 아예 그 페이지를 직접 복붙한 것과 다를게 없다
						: 지시자 태그의 경우 servlet 파일로 변환 시점에 처리를 하기 때문애 그런것
					
					: jspf 만드는 경우 자주 사용한다
						: jspf == Java Server Page Fragment . 즉, JSP 코드의 일부분으로, (단독으로 사용할 용도로 만들어진게 아니라) 다른 jsp 파일에 포함 ㅅ 시킬 목적으로 붙여넣을 목적으로 만든다
				

				3. taglib태그 : 태그라이브러리의 태그 사용(jstl  을 사용하기 위해 지정)



		6. <jsp:action></jsp:action>
			: 액션 태그
			: 호출 시점에서 처리가 된다 
			: 액션 태그도 지시자 태그와 비슷하게 많은 태그들이 액션 태그 카테고리에 속한다
				1. include
					: include 지시자 태그와 자주 비교됨
					: include 시킨 페이지에 제어권을 넘긴다(=그 페이지로 넘어가고 그 페이지가 종료되면 다시 기존 페이지로 돌아온다)
						: 각 페이지는 "독립"적으로 컴파일되고 실행되기 때문에 변수 공유가 불가능하다. 
							: "독립적" 으로 실행 가능한 파일이어야되기에 jspf 를 적용시킬땐 쓰지 않는다

				2,




	: JSP 내장 객체
		; 개발자가 new 여ㅕㄴ산자로 객체 별도로 생성 안해도 JSP 에서 바로 사용할 수 있는 객체. 컨테이너가 JSP를 servlet 으로 변환할때 자동으로 객체가 생성된다. << 그러니가 스크립트릿 안에서 out.print 이런식으로 씀 된다는거다
			: 걍 서블릿 내부서 쓰던 객체랑 똑같은 얘들이다
		1. request
			: 클라이언트로부터 입력받은 내용 뿐 아니라 웹 브라우져와 웹 서버의 정보도 가져올 수 있다
			: 인스턴스 메서드
				String getParameter(name);
				String[ ] getParameterValues(name);
				Enumeration getParameterNames( ); 

				getServerName( )
				getContextPath( )
				getMethod( )
				getSession( )
				getProtocol( )
				getRequestURL( )
				getRequestURI( )
					; URI >> url 에서 context path 부터만 뽑아낸것 .ㄱ그러니까 URL 의 일부
						URL: http://localhost:8282/JspBasic/step02/request01.jsp
						URI: /JspBasic/step02/request01.jsp

		2. response
		3. out
			: 웹 브라우저로 출력하는 객체
				: 그러니까 서블릿에서 PrintWriter 로 받아서 out 만들어야했던걸 쓰는거다
				: out.print() 처럼 사용한다
		4. session	
			: 하나의 웹 브라우져 내에서 정보를 유지하기 위한 세션 정보를 저장하고 있는 객체
		5. page
		6. config
		7. exception

--------------------------------------------------------------
컬렉션의 경우 Arrays.toString( 컬렉션명 ) 쓰는게 아니라  컬렉션명.toString( )을 사용해서 그 내부에 든 내용을 확인한다
편해서 그렇게 하는 것도 있긴 있는데 애초에 Arrays 의 toString의 매변타입은 일반 배열 밖에 없고 컬렉션 타입이 없어서 쓰고 싶어도 못쓴다
------------------------

중복되지 않는 숫자 뽑는 tip 
	<< for 문이 아니라 while 문 사용. 왜냐면 for 문의 경우 몇번 랜덤 숫자 뽑기를 시도해야된다고 확정되있는데 while 문은 어떤 조건에 따라 값으르처리하기 쉽기 떄ㅜㅁㄴ
	<< 그 숫자를 이미 담았는지 알기 위해 순회하기 보다는 contains 메서드를 활용

while(lotto.size()<6){	
int num = (int)(Math.random()*45)+1;

if(!lotto.contains(num)){
lotto.add(num);
}
}
------------------------------------------------------

JSP 에서는 따로 URL 패턴을 지정할 순 없고 MVC 패턴을 이용해야된다고 한다 MVC 패턴 중에 View 이용해서...

확인해보면 해당 jsp 가 .java 로 만들어지는걸 볼 수 있다. 서블릿 파일이 만들어지는거다
C:\FebJava\apache-tomcat-9.0.85-windows-x64\apache-tomcat-9.0.82\work\Catalina\localhost\JspBasic\org

action 쓸떄도 "/프로젝트/폴더명/jsp파일.jps" 으로 적는다. 이때 /src/main/webapp 은 안포함해서 적는다
근데 같은 폴더에 있음 걍 상대경로(파일명만 띡) 적어도 된다
-----------------------------------------------------

response 객체 >> 실행결과를 웹 브라우저로 되돌려 줄때 사용하는것.
-----------------------------------------------------

<b> </b>&nbsp  뭐임
	b 태그
		: 글자를 굵게 표시하는 것. bold 의 약자.
	&nbsp
		: NonBreakingSPace 의 약자. 태그는 아님 . 하지만 문자 사이에 공백을 넣는 기능을 함
		: <div>제&nbsp;목</div> 의 출력은 "제  목"
		: 여러개 쓰면 그만큼 공백이 적용 됨


out.print(lotto.toString());
----------------------------------------------------------------
일단 servlet과 jsp 각각의 특징
	servlet
		: Java resources 아래 .java로 작성
		: servlet 파일만 쓰는게 아니라 별도로 html 파일 만들고 그 html 파일에서 해당 servlet 파일의 url 맵핑을 이용하여 form 의 action 속성으로 연결시킴

	jsp
		: jsp 파일만 씀(별도로 html 파일을 만들지 않음)
=-------------------------------------------------------------
setCharacterEncoding 과 setContentType 의 차이 << 이거 뇌피셜임. 나중에 체크 필요

	: setCharacterEncoding("UTF-8"); && setContentType("text/html") ; == setContentType("text/html; charset=utf-8");


requset.setCharacterEncoding("UTF-8");
	: 서블릿에서 post 방식으로 클라이언트의 정보를 서버에게 전달할떄의 인코딩 방식을 결정
		: get 방식으로 보내는 경우 기본적으로 UTF-8 인코딩이 적용되어있어 불필요하다

response.setCharacterEncoding("UTF-8");	
	: serContentType 에서 정의된 인코딩 방식을 오버라이딩하는 경우에 사용ㅎ나다.
	: 여러번 호출이 가능하지만 ,  getWriter( ) 가 호출된 이후 혹은 클라이언트에게 이미 response 를 한 이후엔 아무리 호출해도 효력이 없다
	
request.setContentType("text/html; charset=UTF-8");
	: contentType 과 character encoding 방식을 정하기 위해 사용한다
	: 아직 클라이언트에게 response 를 한번도 하지 않았고 getWiriter 를 호출하지 않았을떄 호출 가능ㅎ다
		: 이후에 사용하면 효력 없다

	: 서블릿에서 클라이언트에게 출력하는 html 파일의 인코딩 방식을 결정
		: 그러니까 out.print( ) 로 작성하는 내용은 html 파일이고 그 html파일은 utf-8 기준으로 작성되어있다
