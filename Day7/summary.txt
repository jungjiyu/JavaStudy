: 웹 브라우져는 일반적으로 response 이후 관계를 끝낸다
	: 서버와의 연결이 끊긴 이후에도 어떤 정보를 지속적으로 유지하기 위한 수단이 쿠키 혹은 세션이다



f12 >> 개발자 모드


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

세션
	: 서버와 클라이언트의 관계를 유지하기 위한 수단
	: 클라이언트의 특정 위치에 저장되는게 아니라 서버상에 저장되어 보안이 좋고, 많이 저장 가능
	: 과정
		: 클라이언트요청 >> session 자동 생성 >> session 속성 설정
		
	: 세션관련메서드
		(1) setAttribute(String name, Object value)
			: 세션 객체에 이름과 값을 맵핑하여 저장
			: Object >> 자바의 최상위 클래스. 모든 객체를 저장이 가능
			: ex) 	session.setAttribute("sessionName","sessionValue");


		(2) Object getAttribute(String name)
			: 세션 속성명이 name 인 속성의 값을 Object 타입으로 리턴
			: 만약에 존재하지 않으면 null 반환
			: Object 타입이라 강제 형변환 시켜줘야됨
				String name = (String)session.getAttribute("sessionName");


		(3) Enumeration getAttributeNames()
			: 세션 속성의 이름들을 Enumeration 객체 타입으로 리턴함
			: 세션 안에 저장된 이름들의 목록을 enumeration 타입으로 가져옴

		(4) String getId()
			: 세션에 할당된 고유 식별자를 String 타입으로 리턴
			: JsessionId 값으로 저장됨 << 서버가 자동 생성 시키는 쿠키 << 세션 쿠키로 저장됨.
				: 클라이언트와의 연결시 클라이언트별로로 한 브라우저랑 고유한 아이디어가 생성됨. 따라서 웹 브라우져 별로 생성되어진 세션을 구분 가능
				: 세션 쿠키 << 자동 생성되고 웹 브라우져 창 닫을 시 소멸되는 쿠키.
				: 그래서 창 닫으면 로그인 자동으로 해제된는거다. JsessionId 가 나가버리니까
					: 웹 브라우져 별로는 유지된다 << edge 에서 로그인해놨어도 chrome 에선 소용없다
				

		(5) int setMaxInactiveInterval(int interval) 세션 유지시간을 초 단위로 설정한다.
			: 기본 30분
			: 비활성화 간격. 아무것도 안하고 있어도 되는 최대 시간. 해당 시간이 지나면 소멸된다.

		(6) getMaxInactiveInterval() 세션의 유효시간을 초 단위로 얻는다.
		(7) removeAttribute(String name) 세션 속성명이 name인 객체를 삭제한다.
		(8) invalidate() 세션의 모든 데이터를 삭제한다
			: 세션을  무효화한다고 보면된다.
			: 세션 쿠키 까지 없어지는거라 세션 객체를 날려버린다고 봄 된다.

		 : 세션 무효하됬는지 확인하는 법
	if(request.isRequestedSessionIdValid()){ // 유효한 세션이 있는지 확인 후 있으면 true, 반환
		out.print("유효 세션 있음<br>");
	}else{
		out.print("유효 세션 없음<br>");

	}


-------------------------------


Page 객체>>this 객체. 현재JSP 페이지 자체를 타타냄.
pageContext >> JSP 페이지와 관련된 정보를 나타냄


어플리케이션 >> 웹 어플리케이션에 대한 정보를 저장
	: 웹 브라우져가 종료된다고 없어지지 않고, 서버 자체가 종료되기 전까지는 유지
		: 창닫고 그 url 을 복사하는게 또 접속하는거지, 물론 서버를 재시작 하면 없어지는거다.
		: 방문자수 같은거 집계할때 도움이 된다
	: 메서드
		(1) setAttribute(String name, Object Value) 어플리케이션에 값을 저장	
		(2) Object getAttribute(String name) setAttribute()로 저장할때 사용했던 변수값으로 어플리케이션에 저장된 데이터를 불러옴
		(3) removeAttribute(String name) 해당 변수명으로 저장된 어플리케이션값을 삭제


	: application 객체도 jsp 페이지에서 사용할 수 있는 내장 객체이다
		: 이 객체는 자신이 속한 웹 어플리케이션의 범위 안의 모든 jsp 범위에서 공유된다.
		: ServletContext 객체랑 같은 역할이다. 서블릿끼리 자원을 공유하는데 사용

---------------------------------------------------------------------------------------

엔트리란?
---------------------------------------------------------------------------------------
-------------------------------
out.println("sessionName값: "+name);
	out.println("sessionNumber값: "+number);

안먹힌다. <br>을 써줘야된다.
------------------------------------------------------------------------------------------------------------------------

Enumeration enum = request.getParameterNames();
 String name = "";
 while(enum.hasMoreElements()) {

  name = (String)enum.nextElement();
  out.print(name + ":" + request.getParameter(name) + "<br>");
 }



	: 세션 객체는 jsp 페이지에서 따로 생성하지 않아도 사용할 수 있는 내장 객체


---------------------------------------------------------------------------------------

ㅇㅖ외페이지
	:  jsp 에서도 예외가 발생할 수 있는데 , 톰캣에서는 기본적으로 예외페이지를 제공한다.  근데 우리가 직접 예외 페이지를 만들어서 지정할 수 있다.
	: 다 못외우는데 유명한 것만 외우자

HTTP는 여러 에러 코드들이 있다. 이 중에서 404와 500이 대표적인 JSP 에러이다.
	404 >>요청한 페이지가 없음
	500 >> 서버에서 자바를 실행하다가 에러가 남
		: 10/0 같은거 함 글케 됨.
	200>> 정상이란 코드 

1. 포워딩되는 페이지 필수 세팅
				(1) <%@ page isErrorPage="true" %>
					: Exception이란 객체를 사용 가능하게 함
				(2) 	<% response.setStatus(200); %>
					: 기본 세팅. 안해도 문제는 없지만 안전하게 해준다.

	: 방식
		1. page 지시자를 이용 << 단점 : 일일이 jsp 파일마다  <%@page errorPage="포워딩할 페이지" %>  를 써줘야된다
			0. 현재 jsp 파일에서 예외가 발생했을때 사용자에게 보여줄 예외화면을 처리할 jsp 페이지의 경로를 지정. 그러니까 포워딩 시키겠다.
					ex)   <%@page errorPage="포워딩할 페이지" %> 

			


		2. web.xml 이용 << 장점 : 별도로 파일마다 지정 안해도 된다
			: . web.xml  << 서버의 설정 파일
  <error-page>
  	<error-code>404</error-code>
  	<location>/practice09/error404.jsp</location>
  </error-page>
